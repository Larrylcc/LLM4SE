软件工程第 四讲
总体设计
汇报人：张逍怡
_ _ 
2软件工程
第二部分  结构化方法学
总体设计
4.1 软件设计的概念
4.2 总体设计的过程
4.3 设计原理与启发规则
4.4 软件结构的设计工具
4.5 结构化设计方法
4.6 软件设计的评价
34.1 软件设计的概念
▪软件设计是后续开发步骤及软件维护工作的基础。如果没有设计，
只能建立一个不稳定的系统结构。
设计编码测试维护
测试
编码维护
有软件设计                      没有软件设计矿氮 ｀忧
4◼软件设计的基本目标是 用比较抽象概括的方式确定目标系统
如何完成预定的任务 ，即软件设计是确定系统的物理模型 。
软件
设计软件需求 (实际软件来
看)解决方案
设计实现需求
设计指导实现不同设计内容
不同设计层次
不同设计视角制约因素
(资源与技术 )
5从技术观点来看 ，软件设计包括：
◼数据设计 :将实体关系图中描述的对象和关系，以及数据字
典中描述的详细数据内容转化为 数据结构 的定义。
▪体系结构设计 :定义软件系统各 主要成份 之间的关系。
▪接口设计 :根据数据流图定义 软件内部各成份之间 、软件与
其它协同系统之间 及软件与用户之间的交互机制 。
▪过程设计 :把结构成份 转换成软件的 过程性描述 。_ 
6数据字典数
据
流
图实体
关
系
图
状态转换图加工
规
格
说
明
控制规格说明数据
对
象
描
述过程设计
接口设计
体系结构设计
数据设计将分析模型转换为设计
7数据字典数
据
流
图实体
关
系
图
状态转换图加工
规
格
说
明
控制规格说明数据
对
象
描
述过程设计
接口设计
体系结构设计
数据设计将分析模型转换为设计
8◼从工程管理角度来看 ,软件设计分两步完成： 总体设计 和详
细设计。
◼为什么在详细设计之前先进行总体设计 ？
  可以站在全局高度上 ，花较少成本 ，从较抽象的层次上分
析对比多种可能的系统实现方案和软件结构 ，从中选出最
佳方案和最合理的软件结构 ，从而用较低成本开发出较高
质量的软件系统 。_ 
9◼总体设计的基本目的就是回答“ 概括地说，系统应该如
何实现 ?”这个问题。总体设计又称为概要设计或初步设
计。
◼总体设计 阶段的主要任务：
✓确定系统实现方案 ：划分出组成系统的物理元素 (黑盒子级 )--
程序、文件、数据库、人工过程和文档等等。
✓设计软件的结构 ：确定系统中每个程序是由哪些模块组成的，
及这些模块相互间的关系。_ 
10◼总体设计过程通常由两个主要阶段组成：    
➢系统设计：确定系统的具体物理实现方案；
➢结构设计：确定软件结构。
◼ 典型的总体设计过程包括下述 9个步骤：
1.设想供选择的方案 ：基于数据流图进行各种处理的分组方法。
2.选取合理的方案 ：选取合理方案并进行系统流程、成本 /效益、
进度计划等分析。
3.推荐最佳方案 ：推荐并确定最优方案。进入结构设计阶段。4.2 总体设计的过程_ 
114. 功能分解 :从实现的角度对复杂的功能进一步分解，是对
数据流图的进一步细化。  
5. 设计软件结构 :系统模块化分解，并采用工具表示出来。
6. 设计数据库
7. 制定测试计划
8. 书写文档  (系统说明、用户手册、测试计划、  详细的实现
计划、数据库设计结果 )
9. 审查和复审_ 
12◼软件设计的 原理和启发规则 是进行软件设计的主要手段和
应遵循的原则。
◼基本的软件设计原理包括：
❑模块化
❑抽象
❑逐步求精
❑信息隐藏和局部化
❑模块独立4.3 软件设计的原理
4.3.1 原理
13◼模块是由边界元素限定的相邻程序元素的序列，而且有一个总体标识
符代表它。
◼按照模块的定义， 过程、函数、子程序和宏 等，都可作为模块。面向
对象方法学中的对象是模块，对象内的方法也是模块。
◼模块化就是把程序划分成独立命名且可独立访问的模块，每个模块完
成一个子功能，把这些模块集成起来构成一个整体，可以完成指定的
功能满足用户的需求。1.模块化
14◼软件设计应当遵循 模块化的原则
✓每个模块可独立地开发 、测试，最后组装成完整的程序 。模块是构
成程序的基本构件 。
✓出发点 :复杂问题 “分而治之 ”的原则 ,目的是使程序的结构清晰 ，
容易阅读 、理解、测试、修改。
✓模块化的理论依据 :
C(x):问题 x的复杂程度 ，E(x):解决问题 x需要的工作量
       如果  C(P1)>C(P 2)，则E(P1)>E(P 2)；
       C(P1+P2)>C(P 1)+C(P 2)（据经验知 ）
       E(P1+P2)>E(P 1)+E(P 2)_ 
15模块化和软件成本
\ 最小成本区
＼＼了
、-------
晏各软件总成本
/ 
/ 
/ z 接口成本
成本／模块
模块数目
16◼抽象是一种重要的思维工具，是指 抽出事物的本质 特性而暂时不考
虑他们的细节（思维能力的限制）。
◼软件开发的过程多次应用抽象机制。每一步是对软件解法的抽象层
次的不断精化：
      可行性研究  → 需求分析（需求规格说明）
        → 总体设计（设计方案） →详细设计
        → 实现（程序） 。2.抽象_ 
17▪软件设计应遵循 抽象化的原则，包含 过程抽象 、数据抽象 和控制抽
象：
✓过程抽象     是指在软件设计中将处理过程的实现细节隐藏在操作
抽象中，可以直接通过模块接口使用这些处理操作（如方法声
明）。
✓数据抽象   是指采用抽象数据类型表示数据，实现数据封装。使
用者可通过接口使用数据而不必关心数据结构的实现（如学生记
录）。
✓控制抽象  是指没有指定内部细节的程序控制机制。_ 
18▪逐步求精是人类解决复杂问题时采用的基本方法，也是许
多软件工程技术（规格说明，设计和实现技术）的基础。
可以把逐步求精定义为：“ 为了能集中精力解决主要问题
而尽量推迟对问题细节的考虑。 ”
▪人类的认知过程遵守 Miller法则：一个人在任何时候都只能
把注意力集中在 7±2个知识块上。
▪逐步求精最初是由 Niklaus Wirth 提出的一种自顶向下的设
计策略。3. 逐步求精_ 
19▪软件设计应遵循 逐步求精 的原则，建立一个层次的结构。
✓将软件体系结构自顶向下，对过程细节、数据细节和控制
细节从抽象到具体，逐层细化，直到用编程语言的语句能
够实现为止。
✓逐步求精方法确保每个问题都将被解决，而且每个问题都
将在适当的时候被解决。
✓逐步求精与模块化、抽象等概念紧密相关， 求精与抽象是
互补的。_ 
20◼信息隐藏 原理指出：应该这样设计和确定模块，使得一个模块内包
含的信息 (过程和数据 )对于不需要这些信息的模块来说，是不能访问
的。
◼局部化是指把一些关系密切的软件元素物理地放得彼此靠近。
◼局部化有助于实现信息隐藏 。隐藏的 不是有关模块的一切信息 ，而
是模块的实现细节。4. 信息隐藏和局部化_ 
21◼软件设计应遵循 信息隐蔽和局部化 的原则
✓在开发时 ，将每个程序的成分隐藏在模块内 ，定义每一个模块时
尽可能少地显露其内部的处理 。
✓每个模块的实现细节对于其它模块是隐蔽的 ，将来修改软件时偶
然引入错误所造成的影响就可以局限在一个或几个模块内部 ，不
致波及到软件的其它部分 。
✓在可预见将来可能修改的场合 ，信息隐蔽可以 提高软件的可修改
性、可测试性和可移植性 。_ 
225. 模块独立性
◼如果一个模块能够独立于其他模块被编程、测试和修改，则该模块具
有模块独立性 ，也称功能独立性 。
◼模块独立性 是模块化、抽象和信息隐藏 的直接产物。
◼模块独立性很重要：
✓有效的模块化 (即具有独立的模块 )的软件比较 容易开发 ，
✓独立的模块比较 容易测试和维护 。_ 
23非直接
    数据    特征    控制    外部   公共环  内容
  耦合      耦合    耦合    耦合    耦合   境耦合  耦合耦合性
模块独立性模块间的耦合
◼模块之间耦合性越强，模块独立性越差，这样形成的模块结
构界面不好 。_ 
24非直接耦合
◼两个模块之间 没有直接关系 ，它们
之间的联系完全是通过主模块的控
制和调用来实现的。
◼非直接耦合的模块独立性最强。主模块
A B C
E F G
X Y Z
25数据耦合
◼一个模块访问另一个模块时，彼此之间是通过 简单数据
参数  (不是控制参数、公共数据结构或外部变量 )  来交
换输入 /输出信息。
◼数据耦合是 低耦合。
p0 (x0, y0)         p1 (x1, y1)
数据耦合    LINE ( x0, y0, x1, y1)
26特征耦合
◼特征耦合 ：把整个数据结构作为参数传递 ,而被调用的模
块只需使用其中一部分数据元素。
◼特征标记又称为 标记耦合 ，是数据耦合的一种变形。
p0 (x0, y0)         p1 (x1, y1)
标记耦合    LINE ( p0, p1)
public class Main { 
private static void特征耦合 (Dogd) { 
system.out.println(d.getName()); 
} 
private static void 非特征耦合 (Stringname) 
system.out.println(name); 
} 
public static void main(String[] args) { 
Dog d = new Dog("盯财”);
特征耦合 (d);
非特征耦合 (d.getName()); 
} 
27控制耦合
◼控制耦合 : 如果一个模块通过
传送开关、标志、名字等控制
参数，明显地控制选择另一模
块的功能。
◼控制耦合 是数据耦合 的一种变
形。可以通过适当分解由数据
来代替。 中等程度耦合 。Flag
Flag
f1 f2 fnI 
□ ||…· 
28外部耦合
◼一组模块都访问 同一全局简单变量 而不是同一全局
数据结构，而且不是通过参数表传递 该全局变量的
信息，则称之为 外部耦合 。
◼外部耦合 在软件系统中必然存在。 耦合程度比较强 ，
要加以限制。_ 
29◼若一组模块通过同一个 公共数据环境 相互作用（如访问），则它们
之间的耦合就称为 公共环境耦合 。
◼公共的数据环境可以是全局数据结构、共享的通信区、内存的公共
覆盖区等。
◼公共环境耦合 的复杂程度随耦合模块的个数增加而显著增加。公共环境耦合_ 
30◼公共环境耦合有两种情况：
✓  松散公共耦合
✓  紧密公共耦合
common公共数据区A B
common公共数据区A B
松散的公共耦合 紧密的公共耦合l l l l l l 
31◼如果发生下列情形，模块之间的耦合就是 内容耦合 :
✓一个模块直接访问另一个模块的内部数据
✓一个模块不通过正常入口转到另一模块内部
✓两个模块有一部分程序代码重迭 (只可能出现在汇编语言中 );
✓一个模块有多个入口（模块有多个功能）。
▪应该坚决 避免使用内容耦合 。内容耦合_ 
32cA B
进入另一模块内部
模块代码重叠A
Bentry1
……
entry2
……
模块多个入口_ 
一 ：
·— c............. .......... 斗·
33模块内聚
偶然    逻辑    时间    过程    通信    信息    功能
内聚    内聚    内聚    内聚    内聚    内聚    内聚内聚性模块独立性
◼模块内聚性越强，模块独立性越好，对于形成的模块结构有比
较好的作用。
◼要求模块结构达到 高内聚，低耦合 。A 
34◼一个模块中各个部分都是完成某一具体功能 必不可少的组成部分 ，或
者说该模块中所有部分都是为了 完成一项具体功能而协同工作 ，紧密
联系，不可分割的。该模块为 功能内聚 模块。
◼功能内聚模块的 功能独立性最强 。功能内聚_ 
35通信内聚
◼如果一个模块内所有元素都使用了 相同的输入
数据，或产生了 相同的输出数据 ，则称之为 通
信内聚模块 。
◼通常，通信内聚模块是通过数据流图来定义的。
模块内各个功能是紧密相连的。
◼通信内聚属于 中内聚。_ 
36打印
检验结
果
读文件文件
计算 A
计算 B合并修改
文件新文件
加工记录工记／．
37◼过程内聚 ：如果一个模块内的 处理元素是相关 的，而且必须以 特定的
次序执行。
◼通常，把程序流程图中的某一部分划出组成模块，就得到过程内聚模
块。例如，把流程图中的循环部分、判定部分、计算部分分成三个模
块，这三个模块都是过程内聚模块。
◼过程内聚属 中内聚。过程内聚_ 
38◼时间内聚 又称为经典内聚 。一个模块内包含的任务必须在同一时间
段内执行。
◼这种模块大多为多功能模块，但模块的各个功能的执行与时间有关
（如初始化模块）。
◼时间内聚属 低内聚。时间内聚_ 
39◼逻辑内聚 ：如果一个模块完成的任务在逻辑上属于相同或相似的
一类。属于 低内聚。
◼把几种相关的功能组合在一起。调用时，由判定参数来确定执行
的具体功能。
写一个记录 读一个记录判定调用模块
被调用
模块逻辑内聚
40◼偶然内聚 ：模块完成一组任务， 各任务之间没有联系，或联系
很松散。例如，当几个模块内正好有一段代码是相同的，将它
们抽取出来形成单独的模块。属于 低内聚。偶然内聚
A B C
M  STORE REC() TO N
READ MASTER FILE
ADD 1 TO x
……
41▪ 软件设计要遵循 模块独立性 原则：     
✓软件设计中应该追求 高内聚、低耦合 的系统。
✓尽量使用 数据耦合 、少用控制耦合 和特征耦合 、限制外部耦合 和
公共环境耦合 的范围、不用 内容耦合 ；
✓力求做到 高内聚 ;通常中等程度的内聚也是可以采用的，而且效果
和高内聚相差不多；坚决 不使用低内聚 。_ 
42▪人们在开发计算机软件的长期实践中积累了丰富的经验， 总结
这些经验 得出了一些启发式规则。不是设计的目标，也 不是应
该普遍遵循 的原理。
▪这些启发式规则在许多场合能给软件工程师以有益的启示，往
往能帮助他们找到改进软件设计提高软件质量的途径。4.3.2 启发式规则_ 
431.提高模块独立性
    通过模块分解或合并，力求降低耦合提高内聚。
    例如：消除重复功能，改善软件结构
✓完全相似 ：在结构上完全相似，可能只是在数据类型上不一致。
此时可以采取完全合并的方法。
✓局部相似 ：找出其相同部分，分离出去，重新定义成一个独立
的下一层模块。还可以与它的上级模块合并。_ 
442. 模块功能完善化
    一个完整的模块应当有以下几部分：
✓执行规定的功能的部分；
✓出错处理的部分。当模块不能完成规定的功能时，必须回送出
错标志，出现例外情况的原因；
✓如果需要返回数据给它的调用者，在完成数据加工或结束时，  
应当给它的调用者返回一个状态码。_ 
453. 深度、宽度、扇出、扇入都应适当
例如：如果一个模块的扇出数过大，就意味着该模块过分复杂，需要协
调和控制过多的下属模块。应当适当增加中间层次的控制模块。
扇入 :是指直接调用该模块的上级模块的个数。扇入大表示模块的复用程
序高。扇出 :是指该模块直接调用的下级模块的个数。
P P
P1 P2
464.  模块的作用域应在控制域之内
✓模块的控制域包括它本身及其所有的从属模块。
✓模块的作用域是指模块内一个判定的作用范围，凡是受这个
判定影响的所有模块都属于这个判定的作用范围。
✓如果一个判定的 作用域包含在这个判定所在模块的 控制域之
内，则这种结构是简单的，否则，它的结构是不简单的。_ 
47
M 
A +-茫 G
B I I C 
D E F 
485. 设计单入口单出口的模块
    尽量避免内容耦合，而且易理解、易维护。
6. 力争降低模块接口的复杂程度
   模块接口复杂是软件发生错误的一个主要错误。 设计模
块接口应注意信息传递简单、且和模块功能一致 。
   例子： SQRT(Table, root)_ 
497.  模块的大小要适中
8.  模块的功能可预测
      一个功能可预测的模块 ,  不论内部处理细节如何，但 对相同的
输入数据，总能产生同样的结果 。但是，如果模块内部蕴藏有
一些特殊的鲜为人知的功能时，这个模块就可能是不可预测的。
对于这种模块，如果调用者不小心使用，其结果将不可预测。_ 
50保存当前标记
恢复“以前”标记
标记？
标记？
功能不可预测的模块l-— 
4, 
51◼Davis的软件设计原则
①设计应具有 可跟踪性 ，能回溯到软件需求 ;
②设计不必每次都从头做起，可以 复用已有的设计模式和数据模
式。
③设计应当缩小软件与现实世界中问题的“智力距离”， 尽量逼
近问题领域的结构 ;
④设计应具有一致性和集成性 。整个系统应具有统一的风格和格
式，具有良好的接口。
⑤设计结果应能 适应未来可能的变更 ;_ 
52⑥设计不是编码 ，编码也不是设计。设计模型的抽象级别比源代码
高。在编码级别上唯一的设计决策是补充一些实现细节。
⑦设计应具有容错性和异常处理能力 。对于异常数据、事件、操作
条件等能够平滑处理。
⑧在建立设计方案时就 应能评估设计质量 ，而不是在系统编码之后。
⑨应坚持设计评审 ，减少概念性（语义性）的错误。_ 
534.4 软件结构的设计工具
◼层次图（ H图）广泛用来描绘软件的层次结构。层次图中的一个
矩形框代表一个 模块，方框间的 连线表示调用关系 。
◼注意区分： 层次方框图 与层次图。
◼层次图适合于在 自顶向下软件设计 的过程中使用。它表明各个功
能的隶属关系，自顶向下逐层分解得到的。1.层次图  _ 
54层次图例子
正文加工系统的层次图输人 输出 11编辑 II加标题
添加 11删除 插人正文加
工系统
存储 检索 11编目录 II格式化
修改 II合并 11列表
55
◼带编号的层次图 ： 除了用一个名字标识每个框完成的功能，还用一个
编号记录它所在的层次及在该层次的位置。
正文加
工系统
56◼HIPO是1976年由  IBM 公司提出来的，全称是“层次图加输入 /处理 /
输出图”  。
✓HIPO图采用层次图（H图）给出程序的层次关系，采用 IPO图来描
述程序逻辑。
✓和H图中每个方框相对应，应该有一张 IPO图描绘这个方框代表的
模块的处理过程。
✓HIPO图中的每张 IPO图内都应该明显地标出它所描绘的模块在 H图
中的编号，以便追踪了解这个模块在软件结构中的位置。2. HIPO图_ 
57盘存/销售系统
1.0.0
销售处理
 1.1.0盘存处理
1.2.0
计算
销售
记录
1.1.1产生
销售
报表
1.1.2核对顾
客赊欠
的金额
1.1.3检查
库存
数量
1.2.1产生发
货单、
装运单
1.2.2顾客
付款
收据
1.2.3产生
盘存
报表
1.2.3
盘存/销售系统的层次图HIPO图例子
58编号 说                明  
1.0.0销售/盘存处理框图
1.1.0顾客订单检查 , 核对顾客赊欠金额 , 产生销售报表
1.1.1用工作文件的盘存项目号 , 对顾客订单进行核对和排序
1.1.2以地区和人员为单位 , 编制销售报表 , 计算销售佣金
1.1.3检验顾客赊欠金额 , 计算折扣 , 确定支付项目
1.2.0处理顾客盘存管理报表 , 顾客付款收帐 , 处理发货、包装、托
运

59对应H图上1.1.0框的概要 IPO图 
销售事务记录
顾客赊欠
金额文件
退回订单文件后备订单文件
退回订单无效订单
特殊处理订单
工作文件
销售报表计算销售事务记录 ,
产生排序的工作文
件                    1.1.1
按地区及销售人员 ,
产生销售报表 ,计算
销售手续费      1.1.2
核对顾客赊欠金额 ,
计算应付款项 1.1.3
1.1.0 输入  Input 输出  Output
处理  Process------. 
一一一一 1 
I I 
、一勹
、／v 
> 、／、－－／
_ _ 
601.1.2销售报表1. 以销售地区和销售
    人员的销售额排序
2.   准备销售报表
        地区销售总计
        人员销售总计
        计算佣金交易
文件SORT
系统提供
的子例程 销售数
据排序
文件对应于 H图1.1.2框的详细 IPO图 
从1.1.1框来
到 1.1.3框去" IIIL 
I I、:.. -I、，、,_ --..// 
乒
613. 结构图
◼Yourdon提出的结构图是进行软件结构设计的另一个有
力工具。
◼结构图中一个 方框代表一个模块 ，框内注明模块的名字
或主要功能；方框之间的 箭头 (或直线 )表示模块的调用
关系。
◼结构图并不严格表示模块的调用次序，并不指明什么时
候调用下层模块。
62结构图的基本符号模块
调用
数据
控制信息选择（判断）
重复＜＜二＞
u O· 
63◼数据：模块之间传送的数据用 带空心圆的箭头 表示，并在旁边标
上数据名 。
◼控制信息 ：控制信息与数据的主要区别是前者只反映数据的某种
状态。
A
B
(a)x
yz查职工简历
读人事文件
(b)职工号简历数据
无此职工『』A_0A. 0, 
64结构图中的模块
◼传入模块  ─ 从下属模块取得数据，经
过某些处理 , 再将其传送给上级模块。
它传送的数据流叫做逻辑输入数据流。
◼传出模块  ─ 从上级模块获得数据，进
行某些处理，再将其传送给下属模块。
它传送的数据流叫做逻辑输出数据流。传入模块
传出模块
65◼变换模块  ─ 它从上级模块取得数据，
进行特定的处理，转换成其它形式 , 再
传送回上级模块。
◼协调模块  ─ 对所有下属模块进行协调
和管理的模块。变换模块AB
协调模块
AABBr | L 
l | l 
66M
(a)调用 (b)判断调用 (c)循环调用
判定为真时调用 A，为
假时调用 BA B
模块 M循环调用模块 A、
B、CA B CM
AM
I I 
67
结构图例子
产生最佳解
得到好输人 计算最佳解 输出结果
读输人 编辑输入 结果格式化 显示结果
68◼结构化设计（ SD）的基本思想 : 将系统设计成由相对独立、
功能单一的模块组成的结构。
◼结构化设计是基于 模块化、自顶向下细化 、结构化程序设
计等程序设计技术基础上发展起来的。
◼结构化设计是一种 面向数据流 的设计方法，可以与结构化
分析方法（ SA）衔接。4.5 结构化设计方法_ 
69◼该方法实施的要点是：
1)首先精化数据流图 。 根据需求规格说明，研究与审查数据流
加工过程，解决发现的问题。
2)然后根据数据流图确定数据处理的类型 ，针对不同类型（变
换型或事务型）进行 变换分析 或事务分析 处理。
3)由数据流图 推导出系统的 初始结构图 。
4)利用启发式原则，改进系统初始结构图 。
5)修改和补充数据字典。
6)制定测试计划。_ 
70变换流  
◼数据沿着 输入通路 进入系统 ，经过一系列数据变换 ，将数据的
外部形式转换成对应的内部表示 ，然后通过 变换中心 （也称主
加工）处理，再沿着输出通路 转换成外部形式离开系统 。具有
这种特性的数据流称为变换流 。
◼变换流型 DFD可以分成：
   输入＋变换中心 （主加工）＋输出  
输入数据
C变换数据
C→D输出数据
D
71◼用结构图表示变换流型的软件结构。传入模块、变换模块、传
出模块分别对应于输入、变换中心和输出三部分组成。
主模块
B变换成 C 输入 B 输出 C
A变换成 B 输入 A C变换成 D输出 DAABB
B CC
C
DD传入模块 传出模块协调模块
变换模块11』
\ 
72事务流  
◼数据沿着 输入通路 到达一个 事务中心 ，事务中心根据输入数据 （即
事务）的类型在若干个动作 （称为活动流 ）中选择一个来执行 ，这
种数据流也称为 事务流。
◼事务流有明显的事务中心 ，各活动流以事务中心为起点呈辐射状流
出。
◼在事务流型结构图中，事务中心模块按所接受的事务的类型，选择
某一事务（活动流）处理模块执行。各事务处理模块并列。_ 
73事务中心
分派模块 输出结果
事务 1输入作业信息
事务 2事务 3事务 4作业信息作业
信息结果
结果
操作 1操作 2操作 3操作 4操作 5操作 6
细节 1细节 2细节 3细节 4细节 5细节 6传入模块 传出模块协调模块_ 
?|』
— — 
二
74变换分析  
◼变换分析从 变换流的数据流图 导出系统结构图 .
◼步骤
1.重画数据流图；
2.区分有效（逻辑）输入、有效（逻辑）输出和变换中心部
分；
3.进行一级分解，设计模块结构的顶层和第一层模块；
4.进行二级分解，设计输入、输出和中心变换部分的中、下
层模块。_ 
751. 重画数据流图（平铺）
◼为了建立系统结构，将数据流图平铺开来， 物理输入 画在左侧， 物
理输出画在右侧。
◼如果一个外部实体既是物理输入又是物理输出，则两侧都要画出它。A→B B→C
E→G G→HD→F
C→DEA B CD
EF
G H物理输入物理输出0- _ 
,-
762. 确定逻辑输入、逻辑输出
和变换中心部分
◼变换中心是 程序的核心功能 ，它的输入是逻辑输入，它的输出为逻
辑输出。变换中心
A→B B→C
E→G G→HD→F
C→DEA B CD
EF
G H
物理输入 物理输出逻辑输入
逻辑输出:--------------------~ 
' ,- - －气 ，、
I I 、
I I 、
、I I 、
L - ------ - - - ----- - - - -_I 、、
、
、
、
、
、、 I
、
、
、、I:-------------------~ 
' I I 
I I 
I I 
L--- - - ------ - - -----_1 _ _ 、\ ` I 
_ ---------I l 
! ! 
, 
773. 第一级分解：
设计模块结构的顶层和第一层
◼顶层模块 ：其功能就是整个系统的功能；
◼输入控制模块 ：接收所有的输入数据；
◼变换控制模块 ：实现输入到输出的变换；
◼输出控制模块 ：产生所有的输出数据 。
顶层模块
变换控制 输出控制 输入控制
78变换中心
A→B B→C
E→G G→HD→F
C→DEA B CD
EF
G H
物理输入 物理输出逻辑输入
逻辑输出
主模块
C →D,E 输入 C 输出 D输出 EC
C D,E DE
逻辑输入 变换中心 逻辑输出:--------------------~ 
I , 一一一一 ,、
I I 、
I I 、、
I I 、
L --- - - - ----- - - - -----_I 、、
、
、
、
、
、、 I
、
、
、、I、` ` ` :------------------ -; 
I 
I I 
I 
' L-------- - ------- - -_1 
,,,,------ 1 
I I 
, 
? |』尽
, , , 
--------------------,,' 
I / ,- , , , 
I ~-------------------: I I — — 
, , , , , , I, 
I --, 
' ' I 
I I 
I 
- - - - - - - - - - - - - - - - - - -' , , , , , ~-------------------~,' I, 
I I -J 
I I , , , , , , , , , , , , , , : - - - - - - - - - -', , ~-------------------: 
794. 第二级分解：设计中、下层模块
✓输入控制模块 的分解：从变换中心的边界开始 ，沿着各输入通路 ，
把输入通路上的每个加工映射成输入控制模块的一个低层模块 。
✓输出控制模块 的分解：从变换中心的边界开始 ，沿着各输出通路 ，
把输出通路上的每个加工映射成输出控制模块的一个低层模块 。
✓变换控制模块 的分解：变换控制模块通常没有通用的分解方法 ，
应根据数据流图中变换部分的实际情况进行设计 。_ 
80输出 H G →HA→B B→C
E→G G→HD→F
C→D,EA B CD
EF
G H物理输入
物理输出
主模块
C→D,E 输入 C 输出 D 输出 EC
C D,E DE
输入 BB
B→CBC
输入 A A→BA BA输出 G E →G 输出 F D→FDF FEGG
GHH_ 、
\ 
` 
O尸
I , I / 
`1III'/ ` 、，
, 
, , , , 
, ＿勹1IIII
II,'-
? 單二
` ,1,III`
＼＼｀二
I,I,/
— / 
| 
81事务分析
◼事务分析 是从事务流的数据流图导出系统结构图 。
◼步骤：
1.确定事务中心 和每条活动流的流特性  
2.将事务流型数据流图映射成高层的系统结构
3.进一步分解  _ 
821. 确定事务中心和各活动流的流特性  
◼右图为事务流的数据流图的一般形式 。
◼事务中心 （图中的 T）：
  位于活动流的起点 ，
  活动流从该点成辐射状流出 。
◼活动流：
  可为变换流
  可为事务流
◼事务流的数据流图的组成：
  输入流＋事务中心＋若干条活动流  T
输入流
事务流活动流
83◼右图为事务流的数据流图的高层
结构形式 。
◼顶层模块 ：其功能就是整个系统
的功能。
◼接收模块 ：接收输入数据 。
◼分派模块 ：调度模块 ，控制下层
的所有活动模块 。
◼事务模块 ：对应活动流 ，是该活
动流映射成的 。  2. 将事务流型 DFD映射成高层系统结构
…顶层模块
分派 接收
事务 1事务 2事务 n
843. 进一步分解
◼接收模块 ：类同于变换分析中 输入控制模块 的分解。
◼活动流模块 ：根据其流特性 （变换流或事务流 ）进一步采用变换
分析或事务分析进行分解 。 _ 
85模块设计的原则
◼在选择模块设计的次序时， 必须对一个模块的全部直接下
属模块都设计完成 之后，才能转向另一个模块的下层模块
的设计。
◼使用“黑盒”技术 : 在设计当前模块时， 先把该模块的所有
下层模块定义 成“黑盒” ，在设计中利用它们时暂不考虑
其内部结构和实现。在这一步定义好的“黑盒”，在下一
步就可以对它们进行设计和加工。最后，全部“黑盒”的
内容和结构应完全被确定。_ 
86◼在设计下层模块时，应考虑模块的 耦合和内聚问题，以提高初始
结构图质量。
◼模块划分时，一个模块的直接下属模块一般在  5 个左右。如果直
接下属模块超过  10 个，可设立中间层次。
◼如果出现以下情况，就停止模块分解：
✓模块不能再细分为明显的子任务；
✓分解成用户提供的模块或库函数；
✓模块接口是输入输出设备传送的信息；
✓模块不宜再分解得过小。_ 
87◼变换分析是软件系统结构设计的主要方法。
◼一个大型的软件系统通常是 变换型结构 和事务型结构 的混合结
构。利用 以变换分析为主 ，事务分析为辅 的方式进行软件结构
设计。_ 
88a
b
d
p
q
r
sb
a c1d分派模块事务控制
q r s接受通路
p
变换型和事务型的混合结构举例2 曰DD
、,'、,'、、＿一
、------
89◼软件设计既是过程又是模型。
◼设计过程 是一系列的迭代步骤 ，使设计人员能够描
述目标系统的各个侧面。
◼设计模型 首先描述目标系统的整体架构，然后逐步
细化架构得到构造每个细节的指导原则，从而 得到
系统的一系列不同的视图 。
◼良好的设计原则可为 设计过程 导航。4.6 软件设计的评价_ 
90◼衡量设计过程 的技术原则：
①设计必须 实现分析模型中描述的所有 显式需求 ，必须满
足用户希望的所有 隐式需求 。
②对于开发者和未来的维护者而言，设计必须是可读的、
可理解的，使得将来易于编程、易于测试、易于维护。
②设计应该给出软件的全貌，包括从实现角度可看到的数
据、功能、行为。_ 
91◼衡量设计模型 的技术原则
①设计模型应该是一个 分层结构 。该结构：
✓使用可识别的设计模式 搭建系统结构。
✓用显示良好设计特征的 构件构成。
✓可以用演化的方式 实现。
②设计应当 模块化。
③设计应当包含数据、体系结构、接口和构件（模块）的清晰
的视图。_ 
92④设计应当根据将要实现的 对象和数据模式导出合适 的数据结构。
⑤设计应当建立具有独立功能特征的构件。
⑥设计应当建立能够降低模块与外部环境之间复杂连接的接口。
⑦设计模型应当通过使用软件需求信息所驱动的可重复的方法导
出。_ 
93◼软件设计的 基本目标 是确定问题的解决方案，并且用较概括抽象的
方式表达出来。
◼软件设计细化为 总体设计 与详细设计 两个阶段，其好处在于可以在
软件开发的早期从全局高度对软件结构进行优化。
◼总体设计阶段的主要任务包括 确定系统的物理模型 和确定软件的体
系结构。小结_ 
94◼设计原理 和启发规则 是进行软件结构设计的主要手段。 模块独立性
是应该遵循的最主要的原理。
◼层次图、 HIPO图、结构图 是描绘软件结构的常用工具。
◼结构化设计方法是一种 面向数据流 的设计方法，并基于 模块化、自
顶向下细化 、结构化程序设计 等技术，并可与结构化分析方法衔接。
◼软件设计既是过程又是模型，应采用合适标准 评价软件设计模型 与
设计过程 。_ 
◼作业：下面是某仓库物流机器
人规划系统的数据流图。试着
通过变换分析和事务分析导出
系统的结构图。
执行任务任务分
配系统
T 
任务信息
接收任务_ 
任务信息
路径数据
外部控制
模块环境／状态信息
环境状态
信息
环境状态
信息
控制
数据、
机器
人状
态
96接收任务
路径规划
数据生成
模式决策
避障模式 执行任务 返航模式 等待救援
重规划路
径生成
导航控制
外部控制环境/状态信息
任务信息
路径数据
事件
事件 事件 事件
避障数据
重规划控
制数据继续
执行
数据返航
数据救援
数据环境状态
信息
环境状态
信息
谢    谢
主讲人：张逍怡
计算机与通信工程学院青年论坛 报告_ —八厂
