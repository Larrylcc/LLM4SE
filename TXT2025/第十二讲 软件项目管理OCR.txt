软件项目管理 1软件工程
第五部分  软件项目管理   
12.1 项目管理概述
12.2 软件规模估算
12.3 工作量估算   
12.4 进度计划
12.5 人员组织12.6 软件质量保证
12.7 成本效益分析
12.8 软件配置管理
12.9 能力成熟度模型
软件项目管理 212.1 项目管理概述
◼管理就是通过 计划、组织和控制 等一系列活动，
合理地配置和使用各种资源，以达到既定目标的
过程。
◼项目管理 是指“在项目活动中运用专门的 知识、
技能、工具 和方法，使项目能够实现或超过 项目
相关人员 的需要和期限。 ”
◼项目相关人员 （Stakeholder ）是指参与项目和
受项目影响的人，包括项目发起人、项目组、支
持人员、客户、最终用户、供应商，项目对手。
软件项目管理 3◼项目管理已经成为一个较为成熟的领域。
✓核心知识 是范围、时间、成本 和质量。
✓辅助知识 是人力资源管理 、风险管理、沟通管
理和采购管理 。
软件项目管理 4范围
管理时间
管理成本
管理质量
管理
人力
资源
管理沟通
管理风险
管理采购
管理项目整体管理9大知识领域的核心功能
促成功能工具和
技术
项目
成功项目
相关
人员
的需
要和
期望
项目管理框架
软件项目管理 5◼软件项目管理 的对象是软件工程项目 。涉及的范
围覆盖了整个软件工程过程。
◼软件项目开发成功的 关键问题 ：对软件项目的工
作范围、可能风险、需要资源、要实现的任务、
经历的里程碑、花费工作量、进度安排等做到心
中有数。  
软件项目管理 612.2 软件规模估算
◼软件项目管理的关键活动是制定项目计划。为此 ,必
须就需要的 人力（以人月为单位）、项目持续 时间
（以年或月为单位）、 成本做出估算。
◼这种估算大多是 利用以前的花费做为参考 而做出的。
✓如果新项目与以前的一个项目在大小和功能上十
分类似，则新项目需要工作量、开发持续时间、
成本大致与那个老项目相同。
✓假使项目背景完全生疏，只凭过去的经验做出估
算可能就不够了。
软件项目管理 7◼现在已有了许多用于软件开发的估算技术。其共
同特点是：
✓事先建立软件范围
✓以软件度量为基础，以做出估算
✓项目被分解为可单独进行估算的小块
◼管理人员大多使用不止一种估算技术，并用一种
估算技术做为另一种估算技术的交叉检查。
软件项目管理 8◼代码行技术 是比较简单的定量估算软件规模的方
法。这种方法依据 以往开发类似产品的经验和历
史数据 ，估计实现一个功能所需要的源程序行数
。把实现每个功能所需要的源程序行数累加起来
，就可得到实现整个软件所需要的源程序行数。
◼通常由多名有经验的软件工程师分别做出估计。
每个人都估计程序的 最小规模 a、最大规模 b和最
可能的规模 m，分别算出这 3种规模的平均值之
后，再用下式计算程序规模的估计值：1、代码行技术
4
6a m b++
L=
软件项目管理 9◼代码行技术 估算的单位 ：
  程序较小时，代码行数（ LOC）；程序较大时 ,千行
代码数（ KLOC) 。
◼代码行技术的主要优点 ：
  代码是所有软件开发项目都有的 “产品”，而且很
容易计算代码行数。
◼代码行技术的缺点 ：
  源程序仅是软件配置的一个成分，用它的规模代表
整个软件的规模似乎不太合理；
  不同语言实现同一个软件所需的代码行数不相同；
这种方法不适用于非过程语言 。
软件项目管理 10◼功能点技术依据对 软件信息域特性 和软件复杂性
的评估结果，估算软件规模。软件规模的估算单
位为功能点 （Function Point ）。 
◼信息域 的如下特性：
✓输入项数 (Inp)：用户向软件输入的项数
✓输出项数 (Out) ：软件向用户输出的项数
✓查询数 (Inq)：查询即是一次联机输入 (软件以       
联机输出方式产生某种即时响应 )
✓主文件数 (Maf)：逻辑主文件的数目
✓外部接口数 (Inf): 机器可读的全部接口的数量2、功能点技术
软件项目管理 11◼估算功能点的步骤 ：
1) 计算未调整的功能点数 UFP
把产品信息域的每个特性都分类为 简单级 、平
均级或复杂级 ，并根据其等级为每个特性 分配
一个功能点数 。
 用下式计算未调整的功能点数：
  UFP= a1×Inp + a2×Out + a3×Inq
+ a4×Maf + a5×Inf
其中， ai(1≤i≤5) 是信息域特性系数 (表13.1) 。
软件项目管理 12

软件项目管理 132)计算技术复杂性因子 TCF
度量各种 技术因素 对软件规模的影响程度 (表
13.2) ；根据软件的特点，为每个因素 分配一
个从0到5的权值；用下式计算技术因素对软
件规模的 综合影响程度 DI：
  其中， 1<=i<=14, Fi ={0|1|2|3|4|5}
用下式计算 技术复杂性因子 TCF：
                 TCF=0.65+0.01 ×DI

=14
1iiFDI=
软件项目管理 14

软件项目管理 153)计算功能点数 FP
FP=UFP ×TCF
◼功能点技术的优 /缺点：
✓与所用的编程语言无关
✓判断信息域特性 复杂级别 和技术因素 的影响
程度时，存在着相当大的主观因素
  
软件项目管理 16功能点与代码行数的转换
◼代码行数和功能点之间的关系依赖于实现软件的
程序设计语言和设计质量。下面给出使用各种程
序设计语言建立一个功能点所需要的平均代码行
数的粗略估算。
程序设计语言 LOC/FP （平均值）
汇编语言 320
C 128
COBOL 106
FORTRAN 106
软件项目管理 17程序设计语言 LOC/FP （平均值）
Pascal 90
C++ 64
Ada95 53
Vasual Basic 32
Smalltalk 22
PowerBuilder 16
SQL 12续表
软件项目管理 1812.3 工作量估算
◼软件开发成本估算依据是工作量估算。 工作量 是软
件规模 的函数 ，工作量的单位通常是人月 (pm) 。
◼软件估算模型使用由经验导出的公式来预测软件开
发工作量。估算模型的经验数据，都是从有限个项
目的样本集中总结出来的。 没有一个估算模型可以
适用于所有类型的软件和开发环境 。
◼三类工作量估算模型：
   1）静态单变量模型  
   2）动态多变量模型  
   3）COCOMO 模型
软件项目管理 191. 静态单变量模型
▪面向规模 的估算模型
          E = 5.5 + 0.73 ×(KLOC)1.16
Beiley -Basili 模型
          E = 3.2×(KLOC)1.05
Boehm 的简单模型
          E = 5.288 ×(KLOC)1.047
Doty模型 , 针对 KLOC>9 的情况
         E ＝ 5.2×(KLOC)0.91
Walston -Felix模型（ IBM模型）
软件项目管理 20IBM模型  (Walston -Felix)
E ＝ 5.2×(KLOC )0.91
D ＝ 4.1×(KLOC ) 0.36＝ 14.47 ×E0.35
S ＝ 0.54×E0.6
DOC ＝ 49×(KLOC ) 1.01
▪KLOC 是千行源代码数， E是工作量  (PM) ，D 是
项目持续时间 (月)，S 是人员需要量  (人)，DOC
是文档数量  (页)。
▪一条机器指令为一行源代码 。一个软件的源代码
行数不包括程序注释、作业命令、调试程序。
软件项目管理 21◼对于非机器指令编写的源程序，例如汇编语言或
高级语言程序，应转换成机器指令源代码行数来
考虑。
◼转换系数＝机器指令条数／非机器语言执行步数。
语言 转换系数
简单汇编 1
宏汇编 1.2～1.5
FORTRAN 4 ～ 6
PL/I 4 ～ 10
软件项目管理 22◼面向功能点的估算
          E = -13.39 + 0.0545 ×FP
Albrecht -Gaffney 模型
          E = 60.62 ×7.728 ×10-8×FP3
Kemerer 模型
          E = 585.7 + 15.12 ×FP
Maston -Barnrtt -Mellichamp 模型
软件项目管理 23◼Putnam 模型是一种动态多变量模型。
✓适用于大型项目，但也可以应用在一些较小的
软件项目中。
✓假定在软件开发的整个生存期中工作量有特定
的分布。大型软件项目的开发工作量分布可以
用Rayleigh -Norden 曲线表示。2.动态多变量模型
软件项目管理 24
系统定义
功能设计
规格说明
 系统开发
 系统维护与支持
工作量（人月）
时间
系统定义
 功能设计
规格说明
安装
测试与确认
设计与编码
开发工作  = 
总工作量的 40%维护与支持工作  = 
总工作量的 60%
软件项目管理 25▪用Rayleigh -Norden 曲线可以导出一个 “软件方程 ”
✓td是开发持续时间  (年)
✓K是软件开发与维护在内的整个生存期所花
费的工作量  (人年 )
✓L是源代码行数  (LOC)
✓Ck是技术状态常数，因开发环境而异。
34
31
d k t KCL =
软件项目管理 26技术状态常数 Ck的取值
Ck的
典型值开发
环境开 发 环 境 
举 例
2000 差 没有系统的开发方法，缺乏文档和复
审，批处理方式。
8000 好 有合适的系统开发方法，有充分的文
档和复审，交互执行方式。
11000 优 有自动开发工具和技术
软件项目管理 27◼模型把 工作量 看作是 软件规模 和开发时间 这两个变
量的函数。动态多变量估算模型的形式如下：   
              E=(LOC ×B0.333/P)3×(1/t)4
✓E是以人月或人年为单位的工作量
✓t是以月或年为单位的项目持续时间
✓B是特殊技术因子，随着对测试、质量保证、文档及管
理技术的需求的增加而缓慢增加。 KLOC=5~15 ，
B=0.16 ；超过 70 KLOC ，B=0.39
✓P是生产率参数  （实时嵌入式软件， P典型值为 2000 ；
电信系统和系统软件， P=10000 ；商业应用系统，
P=28000 ）
软件项目管理 283.  COCOMO 模型
▪构造型成本估算模型（ COnstructive COst
MOdel ）是一种精确、易于使用的成本估算方法。
1981 年Boehm 在《软件工程经济学 》中首次提出
了COCOMO 模型。
▪这些模型既可以用于 不同类型的项目 ，也可以用于
同一个项目的 不同开发阶段 。
▪软件开发项目的总体类型 :
✓组织型：   不涉及硬件的开发
✓ 嵌入型：   完全与硬件结合的开发
✓ 半独立型： 介于上述两者之间
软件项目管理 29◼COCOMO 模型按其详细程度分成三级：
✓基本 COCOMO 模型：静态单变量模型 ，用源代
码行数 (LOC) 为自变量的经验函数计算软件开
发工作量。
✓中间 COCOMO 模型： 在用 LOC 为自变量的函
数计算软件开发工作量 (称为名义工作量 )的基础
上，用 涉及产品、硬件、人员、项目等方面的
影响因素调整工作量估算 。
✓详细 COCOMO 模型： 包括中间 COCOMO 模型
的所有特性，但用上述各种影响因素调整工作
量估算时，还要 考虑对软件工程过程中每一步
骤（分析、设计等）的影响 。
软件项目管理 30（1）基本 COCOMO 模型
◼基本 COCOMO 模型的名义工作量公式
总体类型 工作量
组织型 MM = 2.4 (KDSI)1.05
半独立型 MM = 3.0 (KDSI)1.12
嵌入型 MM = 3.6 (KDSI)1.20
▪DSI（源指令条数） :代码的源程序行数。包括
作业控制语句和格式语句 ，不包括注释语句。
▪MM（度量单位为人月） :表示开发工作量
软件项目管理 31（2）中间 COCOMO 模型
▪进一步考虑  15 种影响软件工作量的因素 ，通过定
下乘法因子，修正  COCOMO 工作量公式，可以
更合理地估算软件（各阶段）的工作量。
▪此时，工作量计算公式改成
▪中间 COCOMO 模型的名义工作量公式如下所示。

==15
1icfi (KDSI)r MM
软件项目管理 32中间 COCOMO 模型
名义工作量公式
总体类型 工作量
组织型 MM = 3.2 (KDSI)1.05
半独立型 MM = 3.0 (KDSI)1.12
嵌入型 MM = 2.8 (KDSI)1.20
软件项目管理 3315种影响软件工作量的因素  fi
◼产品因素 (3)：软件可靠性、数据库规模、产品复
杂性
◼硬件因素 (4)：执行时间限制、存储限制 、虚拟机
易变性、环境周转时间
◼人的因素 (5)：分析员能力、应用领域实际经验、     
程序员能力 、虚拟机使用经验、程序语言使用经
验
◼项目因素 (3)：现代程序设计技术、 软件工具的使
用、开发进度限制
软件项目管理 34工作量因素  fi很低 低 正常 高 很高 超高
产品因素
软件可靠性 0.75 0.88 1.00 1.15 1.40
数据库规模 0.94 1.00 1.08 1.16
产品复杂性 0.70 0.85 1.00 1.15 1.30 1.65
计算机因素
执行时间限制 1.00 1.11 1.30 1.66
存储限制 1.00 1.06 1.21 1.56
虚拟机易变性 0.87 1.00 1.15 1.30
环境周转时间 0.87 1.00 1.07 1.15
软件项目管理 35工作量因素  fi很低 低 正常 高 很高 超高
人员因素
分析员能力 1.46 1.00 0.86 0.71
应用领域经验 1.29 1.13 1.00 0.91 0.82
程序员能力 1.42 1.17 1.00 0.86 0.70
虚拟机使用经验 1.21 1.10 1.00 0.90
程序语言经验 1.41 1.07 1.00 0.95
项目因素
先进编程技术 1.24 1.10 1.00 0.91 0.82
使用软件工具 1.24 1.10 1.00 0.91 0.83
开发进度限制 1.23 1.08 1.00 1.04 1.10
软件项目管理 36◼例1. 一个  32 KDSI 的声音输入系统是一个输入原
型，或是一个可行性表演模型。 所需可靠性非常
低。把此模型看做 半独立型软件 。
    则有
        MM＝ 3.0（32）1.12 ＝ 146
又查表知  f1＝0.75，其它  fi＝1.00，则最终有
            MM＝ 146×0.75 ＝ 110.
软件项目管理 37◼例2. 一个规模为 10KDSI 的商用微机远程通信的 嵌
入型软件 ，使用中间 COCOMO 模型进行成本估算。  
        程序名义工作量
             MM＝2.8 (10)1.20＝44.38 （MM）
       
        
软件项目管理 38◼影响工作量因素的打分情况如下：
 
    影响工作量因素  fi      情       况    取      值 
 1 软件可靠性    只用于局部地区，恢  
 复问题不严重   1.00（正常）  
 2 数据库规模   20000字节   0.94（低）  
 3 产品复杂性   用于远程通信处理   1.30（很高）  
 4 时间限制   使用 70%的CPU时间    1.10（高）  
 5 存储限制   64K中使用 45K   1.06（高）  
 6 机器    使用商用微处理机   1.00（额定值）  
 7 周转时间   平均 2小时   1.00（额定值）  
 8 分析员能力   优秀人才   0.86（高）  
 9 工作经验    远程通信工作 3年   1.10（低）  
 
软件项目管理 39程序实际工作量
       MM＝44.38 × ＝44.38 ×1.17＝51.5 (MM)

=15
1iif
 
    影响工作量因素  fi      情       况    取      值 
10 程序员能力   优秀人才   0.86（高）  
11 工作经验   微型机工作 6个月   1.00（正常）  
12 语言使用经验   12个月   1.00（正常）  
13 使用现代程序设计技术   1年以上   0.91（高）  
14 使用软件工具   基本的微型机软件   1.10（低）  
15 工期   9个月   1.00（正常）  
 
软件项目管理 40（3）详细 COCOMO 模型
▪详细 COCOMO 模型的名义工作量公式与中间
COCOMO 模型相同。
▪工作量因素分级表 分层、分阶段给出。
▪针对每一个影响因素 ，按模块层、子系统层、
系统层，有三张工作量因素分级表，供 不同层
次的估算 使用。
▪每一张表中工作量因素又按 开发各个不同阶段
给出。
软件项目管理 41软件可靠性工作量因素分级表
(子系统层 )
阶段
级别需求和
产品设计详细
设计编程和
单元测试集成
及测试综合
非常低 0.80 0.80 0.80 0.60 0.75
低 0.90 0.90 0.90 0.80 0.88
正常 1.00 1.00 1.00 1.00 1.00
高 1.10 1.10 1.10 1.30 1.15
非常高 1.30 1.30 1.30 1.70 1.40
软件项目管理 424.  COCOMO -2模型 (自学 )
▪COCOMO 模型适用于定制的软件项目。 1997年
Boehm 等人提出来的 COCOMO -2模型则 适用于广
泛汇集各种技术的软件项目 ，如商用软件、 面向
对象软件 、通过螺旋型或演化型开发模型制作的
软件。
▪COCOMO -2模型有三种：
✓应用组合模型 （适用于早期原型）
✓早期设计模型 （适用于体系结构设计阶段）
✓后体系结构模型 （适用于体系结构之后阶段）
软件项目管理 4312.4  进度计划
◼实现一个软件项目需要完成数以百计的任务。如
何合理分配工作量 ，严密监控软件开发的进展情
况，使软件开发进度不致拖延非常重要。 进度安
排落空，会导致市场机会的丧失，使用户不满意，
而且也会导致成本的增加。
◼软件项目的 进度计划： 通过把工作量分配给特定
的软件工程任务并规定完成各项任务的起止日期，
从而将估算出的项目工作量分布于计划好的项目
持续期内。
◼进度计划将随着时间的流逝而 不断演化 。
软件项目管理 44◼估算出项目所需的总工作量之后，用多长时间才
能完成该项目的开发工作？
  例如,对于估计工作量为 20人月的项目：
✓1个人用 20个月完成该项目 ?
✓4个人用 5个月完成该项目 ?
✓5个人用 4个月完成该项目 ?
✓10个人用 2个月完成该项目 ?
✓20个人用 1个月完成该项目 ?12.4.1 估算开发时间
软件项目管理 45◼成本估算模型提供了估算开发时间 T的方程。典型
的开发时间估算模型：  
✓Walston_Felix 模型   
    T=2.5E0.35
✓原始的 COCOMO 模型   
    T=2.5E0.38
✓COCOMO2 模型   
    T=3.0E0.33+0.2 ×(b-1.01)
✓Putnam 模型
T=2.4E1/3其中：
E是开发工作量
（人月）
T是开发时间
（月）
软件项目管理 46◼项目开发时间中的 Brooks 规律：向一个已经延期
的项目增加人力，只会使得它更加延期 。
✓当小组变得更大时，每个人需要用更多时间与
组内其他成员讨论问题、协调工作，因此增加
了通信开销 。
✓如果在开发过程中增加小组人员，最初一段时
间内项目组 总生产率不仅不会提高反而会下降 。
因为新成员在开始时不仅不是生产力，而且在
他们学习期间还需要花费小组其他成员的时间。
软件项目管理 47◼沟通需花费时间和代价，会引起软件错误增加，
降低软件生产率。 若两个人之间需要沟通，则称
在这两个人间存在一条沟通路径。如果一个软件
开发小组有  p个人，每两人之间都需要沟通，则
总的沟通路径有 p(p-1)/2(条)。
四人之间
所有沟通路径六人之间
所有沟通路径
软件项目管理 48◼例如，若设一个人单独开发软件，生产率是 5000
行／人年 。若  4 个人组成一个小组共同开发这个
软件，则需要  6条沟通路径。若在每条沟通路径
上耗费的工作量是  250 行／人年 。则小组中每个
人的软件生产率降低为  
        5000－6×250／4 
＝5000－375 
= 4625  行／人年。
软件项目管理 49项目组规模与生产率关系

软件项目管理 50◼Boehm 指出： 软件项目的开发时间最多可以减少
到正常开发时间的 75% 。
软件项目管理 51◼参与软件项目为多人时，开发工作就会出现 并行
情形。项目的 并行性提出了一系列的进度要求 。
◼软件开发进程中设置许多里程碑。 里程碑 为管理
人员提供了指示项目进度的可靠依据。
◼因为并行任务是同时发生的， 所以进度计划表必
须决定任务之间的从属关系 ，确定各个任务的先
后次序和衔接，确定各个任务完成的持续时间。
◼项目负责人应注意 构成关键路径的任务 ，即若要
保证整个项目能按进度要求完成，就必须保证这
些任务要按进度要求完成。12.4.2 任务的确定与并行性
软件项目管理 52需求分析需求评审
概要设计
概要设计评审详细设计 设计走查 编程 代码走查 单元测试
测试计划 测试过程 测试评审集成测试
确认测试 



 

软件项目管理 53◼每个软件项目都要求制定一个 进度安排 ，但不是
所有进度都得一样安排。进度安排需要考虑的是：
✓预先对进度如何计划？
✓工作怎样就位？
✓如何识别定义好的任务？
✓管理人员对结束时间如何掌握  ?
✓如何识别和监控 关键路径以确保结束？
✓对进展如何度量？
✓如何建立分隔任务的 里程碑。12.4.3 制定开发进度计划
软件项目管理 54◼软件项目的进度安排的主要步骤：
1)识别一组项目任务
2)建立任务之间的相互关联
3)估算各个任务的工作量
4)分配人力和其它资源
5)制定进度时序
软件项目管理 551)划分任务     把软件项目划分为若干可管理的活动，
用软件过程模型 定义，为此，需对过程和产品进
行分解。
2)确定相互依赖性  确定各个活动和任务之间的相
互依赖性。某些 任务顺序执行 、有些任务 并行执
行。
3)分配时间     为每个任务分配工作量，确定 开始时
间和结束时间 。需考虑各任务间的相互关联和人
员参与情况。
4)确认工作量     确保项目划分中各任务的参加人员
的数量和工作量，进行合理分配。进度安排的基本原则
软件项目管理 565)定义责任  指定各个任务的责任者 。
6)定义可交付物     每个任务的输出是一  个工作产
品或工作产品的一部分，确定把哪些 工作产品
组合为可交付物 。
7)定义里程碑
    为每个任务或每组任务指定一个项
目里程碑。可交付物 经过评审并确认后才能成
为里程碑 。
软件项目管理 57◼40－20－40规则
✓在整个软件开发过程中， 编码工作量仅占 20
％，编码前工作量占 40％，编码后工作量占  
40％。
✓40－20－40 规则只应用来做为一个指南。实
际的工作量分配比例必须按照各项目的特点
来决定
 。
◼在软件工程项目中必须 处理好进度与质量之间的
关系。在进度压力下赶任务，其成果往往是以牺
牲产品质量为代价。
软件项目管理 58◼使用图形工具以表明
✓各个任务的 计划开始时间 ，完成时间 ；
✓各个任务 完成标志 （即用○标志文档编写和用△
标志评审 ）；
✓各个任务与参与工作的人数，各个 任务与工作
量之间的衔接情况 ；
✓完成各个任务所需的物理资源和数据资源。12.4.4  进度控制的图形工具
软件项目管理 59◼Gantt （甘特）图是历史悠久、应用广泛的制定
进度计划的工具。
◼在甘特图中，每一任务完成的标准，不是以能否
继续下一阶段任务为标准，而是以必须交付应交
付的文档与通过 评审为标准。
◼在甘特图中， 文档编制与评审 是软件开发进度的
里程碑。1. 甘特图
软件项目管理 601    2    3    4    5    6    7    8    9   10  11  12  13  14
当前进度A
B
C
D
E任
务
周文档编写
评审完成计划完成
软件项目管理 61
旧木板房刷漆工程的 Gantt图
软件项目管理 62◼Gantt 图能很形象地描绘任务分解情况，以及每个
子任务 (作业)的开始时间和结束时间，是进度计划
和进度管理的有力工具。
◼优点：直观简明、容易掌握、容易绘制。
◼缺点：  
✓不能显式地描绘 各项任务间的依赖关系 ；
✓进度计划的 关键部分不明确 ，难于判定哪些部
分应当是主攻和主控的对象；
✓计划中有潜力的部分及潜力的大小不明确，往
往造成潜力的浪费 。
软件项目管理 632. 工程网络
◼工程网络 是制定进度计划时另一种常用的图形工
具。
◼工程网络 采用网络图来描述一个项目的 任务网络 ，
也就是从一个项目的 开始到结束 ，把应当完成的
任务用图的形式表示出来。 此外， 显式地描绘各
个任务彼此间的依赖关系 。
◼在工程网络中用 箭头表示作业 ，用圆圈表示事件
(一项作业开始或结束 )。注意，事件仅仅是可以
明确定义的时间点，它并不消耗时间和资源。作
业通常既消耗资源又需要持续一定时间。
软件项目管理 64
三个模块开发的网络图01 2
8
6 6
7
8 889
7 9
345
67 85
BC
组装测试
A
测试
B
编码

软件项目管理 65
旧木板房刷漆工程的工程网络虚拟作业
虚拟作业： 事实上并不存在的作业，既不消耗资
源也不需要时间。引入虚拟作业是为了显式地表
示作业之间的依赖关系 。
软件项目管理 6612.4.5 基于 CPM的进度估算与安排
◼CPM 方法叫做 关键路径法 ，是安排开发进度、制
定软件开发计划的最常用的方法。
◼CPM 方法为项目计划人员提供了一些定量的工具。
a)确定关键路径 ，即决定项目开发时间的任务链。
在关键路径上的各个任务都是时间余量为零的
关键任务，不能有任何时间延误 。
b)应用统计模型 ，对每一个单独的任务确定最可
能的开发持续时间的估算值。
c)计算边界时间 ，以便为具体的任务定义时间窗
口
。
软件项目管理 671. 估算工程进度
◼为了估算工程进度，在工程网络图的基础上必须
增加一些必要的信息。
1)把每个作业 估计需要 使用的时间 写在表示该项
作业的 箭头上方 （箭头仅表示依赖关系，上方
的数字表示作业的持续时间） ;
2)为每个事件 计算下述两个统计数字：
✓最早时刻 EET：该事件可以发生的最早时间，
写在表示事件的 圆圈的右上角 。
✓最迟时刻 LET：该事件最晚可以发生的时刻，
写在表示事件的 圆圈的右下角 。
软件项目管理 68
旧木板房刷漆工程完善后的工程网络
软件项目管理 69◼计算事件最早时刻 EET：通常工程网络中 第一个
事件的 EET定义为 零；其他事件的 EET在采用如下
规则，从 左至右按事件发生顺序计算 。
a)考虑进入该事件的所有作业。
b)对于每个作业都计算它的 持续时间与起始事件
的EET之和。
c)选取上述和数中的 最大值作为该事件的最早时
刻EET
。
软件项目管理 70
EET（4）= max(2+3,6+0) =6
软件项目管理 71◼计算事件最迟时刻 LET：最后一个事件 (工程结束 )
的LET就是它的 EET；其他事件的 LET采用如下规
则，从右至左按逆作业流的方向计算。
a)考虑离开该事件的所有作业。
b)从每个作业的结束事件的 最迟时刻 中减去该作
业的持续时间 。
c)选取上述差数中的 最小值 作为该事件的最迟时
刻LET 
。
软件项目管理 72
LET（8）= min(21 -6,20-0) =15
软件项目管理 732. 关键路径
◼关键路径 ：最早时刻和最迟时刻相同的事件集合。
关键路径上的事件 (关键事件 )必须准时发生 ，组
成关键路径的作业 (关键作业 )的实际持续时间不
能超过估计的持续时间，否则工程就不能准时结
束。
◼工程项目的管理人员应该密切 注视关键作业的进
展情况 ，如果关键事件出现的时间比预计的时间
晚，则会使最终完成项目的时间拖后；如果希望
缩短工期，只有往关键作业中增加资源才会有效
果。
软件项目管理 74
旧木板房刷漆工程的关键路径
软件项目管理 753. 机动时间
◼不在关键路径上的作业有一定程度的机动余地 ,即
实际开始时间可以比预定时间晚一些 ，或者 实际
持续时间可以比预定的持续时间长一些 ，而并不
影响工程的结束时间。
◼一个作业可以有的全部机动时间等于它的结束事
件的最迟时刻 减去它的开始事件的 最早时刻 ，再
减去这个作业的 持续时间 ： 
机动时间 =(LET)结束-(EET)开始-持续时间     
软件项目管理 76

软件项目管理 7712.5 人员组织
▪软件项目成功的关键是有高素质的 软件开发人员 。
为使多名软件开发人员有效地分工、协作共同完
成开发工作，必须把他们合理地组织起来。
▪经验表明 :项目组组织得越好，其生产率越高，而
且产品质量也越好 。
▪开发组织采用什么形式，要针对 软件项目的特点
来决定，同时也 与参与人员的素质有关 。
软件项目管理 781. 人力资源
◼人是软件开发最重要的资源 。在安排开发活动时必
须考虑人员的 技术水平 、专业、人数、以及在开发
过程各阶段中对各种人员的需要 。
◼首先估算范围并选择为完成开发工作所需要的技能。
还要在 组织和专业两方面做出安排。
✓对于一些 规模较小 的项目，只要向专家做些咨询，
也许一个人就可以完成所有的软件工程步骤。
✓对于一些 规模较大 的项目，在整个软件生存期中，
各种人员的参与情况是不一样的。
软件项目管理 79管理人员初级技术人员高级技术人员 高人
员
参
与
程
度
计
        
划
需
求
分
析
概
要
设
计
详
细
分
析
程
序
编
码
单
元
测
试
集
成
测
试
确
认
测
试
软件项目管理 80(1)尽早落实责任： 在软件项目开始时， 要尽早指定
专人负责。 使他有权进行管理，并对任务的完
成负全责。
(2)减少接口： 一个组织的生产率随完成任务中存在
的沟通路径数目增加而降低。要有合理的人员
分工、好的组织结构、有效的沟通，减少不必
要的生产率的损失。
(3)责权均衡： 软件经理人员所负的责任不应比委任
给他的权力还大。2. 组织原则
软件项目管理 81(1) 按课题划分的模式
 把软件开发人员按课题组成小组，小组成员自始
至终参加所承担课题的各项任务。他们应负责完
成软件产品的定义、设计、实现、测试、复查、
文档编制、甚至包括维护在内的全过程。3. 组织结构的模式
软件项目管理 82(2) 按职能划分的模式    
    把参加开发项目的软件人员按任务的工作阶段划
分成若干个 专业小组 。要开发的软件产品在每个
专业小组完成阶段加工    (即工序 )  以后，沿工序
流水线向下传递。
例如，分别建立计划组、需求分析组、设计组、
实现组、系统测试组、质量保证组、维护组等。
各种文档资料按工序在各组之间传递 。
软件项目管理 83(3) 矩阵形模式
 这种模式实际上是以上两种模式的复合。
   一方面，按工作性质，成立一些专门组，如开发
组、业务组、测试组等；
   另一方面，每一个项目又有它的经理人员负责管
理。每个软件人员属于 某一个  专门组 ，又参加 某
一项目的工作 。
软件项目管理 84定义 设计 编码 测试 维护总经理
产品
经理 1
产品
经理 2
产品
经理 3子项目
12
子项目
22
子项目
32子项目
13子项目
14子项目
15
子项目
33子项目
11
子项目
21
子项目
31
软件项目管理 85项目特点 组 织    类 型
矩阵型
弱 均衡 强
项目经理的权力 很小或
没有有限 小~中等 中等 ~大 大到接近
全权
组织中全职参加项
目工作的人员的比
例没有 0%
~
25%15%
~
60%50%
~
95%85%
~
100%
项目经理角色 兼职 兼职 兼职 全职 全职
项目经理头衔 项目协
调人 /项
目领导项目协调
人/项目
领导项目经理 /
项目官员项目经理 /
规划经理项目经理
/规划经
理
项目管理行政人员 兼职 兼职 兼职 全职 全职职能型 课题型组织结构对项目的影响
软件项目管理 864、程序设计小组的组织形式
小组内部人员的组织形式 对生产率也有影响。
(1) 主程序员制小组
◼美国IBM公司在 20世纪70年代初期开始采用主程
序员组的组织方式： (1) 软件开发人员多数比较缺
乏经验； (2) 程序设计过程中有许多事务性的工作；
(3) 多渠道通信很费时间，将降低程序员的生产率。
◼主程序员组的组织方式有不少优点，但是，在许
多方面却是不切实际的。
软件项目管理 87◼主程序员组 的核心由 1名主程序员 (高级工程师 )、
编程秘书、 1~3名程序员 、1名后备程序员 组成。
✓主程序员： 是成功的管理人员又是经验丰富、
技术好、能力强的高级程序员， 负责小组全部
技术活动的计划、协调与审查，设计和实现项
目中的关键部分 ，负责指导其他程序员完成详
细设计和编码工作 。
✓编程秘书： 负责完成与项目有关的 全部事务性
工作，如维护项目资料库和项目文档。
✓程序员： 负责项目的具体分析与开发，文档资
料的编写工作。
软件项目管理 88
✓后备程序员： 支持主程序员的工作，为主程
序员提供咨询，也做部分分析、设计和实现的
工作。并在必要时能代替主程序员工作。
◼主程序员制小组还可以由一些 专家（如通信专家
或数据库设计专家）协助工作。
主程序员制小组沟通路径
主程序员制小组组织结构
软件项目管理 89(2) 民主制小组
    在民主制小组中，遇到问题，组内成员之间可以
平等地交换意见 。工作目标的制定及做出决定都
由全体成员参加 。虽然也有一位成员当组长，但
工作的讨论、成果的检验都公开进行。 这种组织
形式强调发挥小组每个成员的积极性 。   
民主制小组 沟通路径
软件项目管理 90(3) 现代程序员组
 在现代程序员组中，组内人员分为三级： 组长
（技术组长 和行政组长） 负责全组工作， 包括任
务分配、技术评审和走查、掌握工作量、参加技
术活动、业绩考核等。  直接领导二至三名 高级程
序员，每位 高级程序员 通过基层小组，管理若干
位程序员 。
组长
高级程序员
初级程序员沟通路径
软件项目管理 91
现代程序员组的技术与非技术管理结构负责小组的
技术活动负责所有非技
术性事务的管
理决策
软件项目管理 92
大型项目的技术管理组织结构
软件项目管理 93
包含分散决策的组织方式把民主制程序员组
和主程序员组的优
点结合起来
软件项目管理 945.  人员配备
◼如何合理地配备人员，也是成功地完成软件项目
的切实保证。所谓合理地配备人员应包括：
a)按不同阶段适时任用人员
b)恰当掌握用人标准
软件项目管理 95（1） 项目开发各阶段所需人员
▪在软件开发的整个过程中，需要的人力随开发进
展逐渐增加，在编码与单元测试阶段达到高峰，
以后又逐渐减少。
◼如果恒定地配备人力，在 开发初期 将会有部分人
力资源用不上而 浪费掉 。在开发中期 ，需要人力
不够，造成 进度的延误 。在开发后期 就需要增加
人力以 赶进度 。
软件项目管理 96◼实际人力需求与开发进度的关系如下图中的曲线
所示。
人
力
时间浪费掉
的
工作量因人力配备
不当，要求
增加的额外
工作量需要而缺少的工作量
无用工作量  
软件项目管理 97（2） 配备人员的原则
◼重质量     软件项目是技术性很强的工作，要 任用
少量有实践经验、有能力的人员去完成关键性的
任务。
◼重培训     培养所需技术人员和管理人员是有效解
决人员问题的好方法。
◼双阶梯提升     人员提升应分别按技术职务和管理
职务进行，不能混在一起。
软件项目管理 98◼项目经理是工作的组织者，他的管理能力的强弱
是项目成败的关键。他应具有以下能力：
✓沟通与转换能力： 把用户提出的非技术性要求
加以整理提炼 ,以技术说明书的形式转告给分析
员和测试员。
✓综合问题的能力 ：能够把表面上似乎无关的要
求集中在一起 , 归结为 “需要什么 ”, “要解决
什么问题 ”。
✓要懂得心理学 ：能说服上级领导和用户，让他
们理解什么是不合理的要求。（3）对项目经理的要求
软件项目管理 99▪软件项目中人的因素越来越受重视。在评价和任
用软件人员时，必须掌握一定的标准。 人员素质
的优劣常常影响到项目的成败 。
✓牢固掌握计算机软件的基本知识和技能。
✓善于分析和综合问题，具有严密的逻辑思维能力。
✓工作踏实、细致 ,  不靠碰运气，遵循标准和规范，具
有严格的科学作风。
✓工作中表现出有耐心、有毅力、有责任心。
✓善于听取别人的意见，善于与周围人员团结协作，建
立良好的人际关系。
✓具有良好的书面和口头表达能力。（4） 评价人员的条件
软件项目管理 10012.6  软件质量保证
◼质量是产品的生命 。
✓什么是软件质量？
✓如何度量软件的质
量？
✓如何保证软件的质
量？
进度
成本 质量
软件项目管理 101◼软件质量 ：“软件与 明确地 和隐含地 定义的需求
相一致的程度 ”。软件质量强调了下述要点：
✓软件需求 是度量软件质量的基础，与需求不
一致就是质量不高。
✓指定的 开发标准 定义了一组指导软件开发的
准则，如果没有遵守这些准则， 几乎肯定 会
导致软件质量不高。
✓如果软件满足明确描述的需求，但却不满足
隐含的需求 ，那么软件的质量仍然是值得怀
疑的。12.6.1 软件质量
软件项目管理 102
◼影响软件质量的主要因素可以分成 3组：产品运行
、产品修改 和产品转移 。分别反映用户在使用软
件产品时不同倾向或观点。
软件项目管理 103◼以投入工作量（ 面向规模的度量 、面向功能的度
量）为依据， 采用下列度量对 生产率与质量 进行
评价：
✓软件过程的直接度量 包括所 投入的成本和工
作量。
✓软件产品的直接度量 包括产生的代码行数、
执行速度、存储量大小、在某种时间周期中
报告的差错数。12.6.2 软件质量的度量
软件项目管理 104✓软件产品的间接度量 包括功能性、复杂性、效
率、可靠性、可维护性和许多其他质量特性
✓软件生产率度量 的焦点集中在软件工程过程的
输出；
✓软件质量度量 则指明了软件适应明确和不明确
的用户要求到什么程度；
✓软件技术度量 的焦点则集中在软件的某些特性
（如逻辑复杂性、模块化程度）上而不是软件
开发的全过程。
软件项目管理 105▪软件质量度量 贯穿于软件工程的全过程中以及软
件交付用户使用之后。
✓在软件交付之前 得到的度量可作为 判断设计和
测试质量好坏的依据 。这一类度量包括程序复
杂性、有效的模块性和总的程序规模。
✓在软件交付之后 的度量则把注意力集中于还未
发现的 差错数 和系统的 可维护性方面 。
✓使用得最广泛软件质量的 事后度量（ 包括正确
性、可维护性 、完整性 和可使用性） 。
软件项目管理 1061)正确性 ：一个程序必须正确地运行，并为它的
用户提供某些输出。正确性要求软件执行所要
求的功能。正确性的度量是 每千代码行 (KLOC )
的差错数 ，其中将差错定义为已被证实是不符
合需求的缺陷。
2)可维护性 ：软件维护比其它的软件工程活动需
要更多的工作量。还没有一种方法可以直接度
量可维护性，必须采取间接度量。
       一种简单的面向时间的度量 :平均变更等待时
间MTTC 。这个时间包括 分析变更要求、设计
适当修改、实现变更并测试、把变更发送给所
软件项目管理 107有用户 。一个可维护的程序与不可维护的程序
相比，应有较低的 MTTC 。
3)完整性： 完整性度量一个系统抗拒对它的安全
性攻击（事故的和人为的）的能力。程序、数
据和文档都会遭到攻击。
 度量完整性，需要定义两个附加的属  性：危险
性和安全性。 危险性是特定类型的攻击将在一
给定时间内发生的概率，安全性是排除特定类
型攻击的概率。
 一个系统的完整性可定义为
         完整性＝∑(1－危险性 ×(1－安全性 ))
软件项目管理 1084)可使用性： 如果程序不具有用户友好性，即使
它所执行的功能很有价值也常常会失败。用户
友好性可依据以下四个特征进行度量：
✓学习所需的体力上的和智力上的技能 ；
✓为达到适度有效使用系统所需时间；
✓软件使用时在生产率方面的净增值；
✓用户角度对系统的主观评价。
软件项目管理 109◼软件质量保证的措施主要有：  
✓基于非执行的测试 （复审或评审）：主要用来
保证在编码之前各阶段产生的 文档的质量 ；
✓基于执行的测试 （即软件测试）：在程序编写
出来之后进行，它是保证软件质量的最后一道
防线；
✓程序正确性证明 ：使用数学方法严格验证程序
是否与对它的说明完全一致。12.6.3 软件质量保证措施
软件项目管理 110◼从人员组织的角度，可以将参加软件质量保证工
作的人员划分成下述两类：  
✓软件工程师： 通过采用先进的技术方法和度量，
进行正式的技术复审，完成计划周密的软件测
试来保证软件质量。
✓SQA 小组：辅助软件工程师以获得高质量的软
件产品。软件质量保证活动主要是：计划，监
督，记录，分析和报告。 SQA 小组通过确保 软
件过程的质量 来保证 软件产品的质量 。
软件项目管理 111◼复审或评审 的能够 较早发现软件错误 ，可防止错
误被传播到软件过程的后续阶段，大大降低后续
开发和维护阶段的成本。
◼统计表明：在大型软件产品中检测出的错误，
60% ~70% 属于规格说明错误或设计错误 ，正式
技术复审在发现规格说明错误和设计错误方面的
有效性高达 75% 。
◼正式技术复审包括 走查(Walkthrough) 和审查
(Inspection) 。（1）基于非执行的测试
软件项目管理 112◼走查组由 4~6名成员组成。以走查规格说明的小
组为例，成员至少包括 :
✓一名负责起草规格说明的人
✓一名负责该规格说明的管理员
✓一位客户代表
✓一名下阶段开发组的代表
✓SQA 小组的一名代表 。其中 SQA 小组的代表
应该作为走查组的组长。
◼走查组成员最好是经验丰富的高级技术人员。走
查的时间最长 不要超过 2小时。走查组的任务仅仅
是标记出错误而不是改正错误 。走查
软件项目管理 113◼走查主要有下述两种方式：  
✓参与者驱动法 ：参与者按照事先准备好的列表，
提出他们不理解的术语和认为不正确的术语。
文档编写组的代表必须回答每个质疑，要么承
认确实有错误，要么对质疑做出解释。
✓文档驱动法 ：文档编写者向走查组成员仔细解
释文档。走查组成员在此过程中不时针对事先
准备好的问题或解释过程中发现的问题提出质
疑。
◼文档驱动法 往往能检测出更多错误。经验表明，使
用文档驱动法时许多错误是由文档讲解者自己发现
的。
软件项目管理 114◼通常审查组由 4人组成。审查组必须包括：
✓组长（审查组的管理人员与技术负责人）
✓负责当前阶段开发工作的项目组代表
✓负责下一阶段开发工作的项目组代表
✓一名SQA 小组的代表
◼审查过程不仅步数比走查多，而且 每个步骤都是
正规的 。仔细划分错误类型，并把这些信息运用
在后续阶段的文档审查中以及未来产品的审查中 。
◼审查是检测软件错误的一种好方法，利用审查可
以在软件过程的早期阶段 发现并改正错误 。审查
软件项目管理 115◼审查过程包括下述 5个基本步骤：
✓综述：由文档编写成员向审查组综述该文档。
✓准备：评审员阅读文档，列出在审查中发现的
错误的类型，按发生频率把错误类型分级。
✓审查：评审组走查整个文档。不超过 90分钟。
✓返工：文档的作者负责解决在审查报告中列出
的所有错误及问题。
✓跟踪：组长必须 确保所提出的每个问题都得到
了圆满的解决。如果审查过程中返工量超过５
%，则应该由审查组再对文档全面地审查一遍。
软件项目管理 116◼软件测试 只能证明程序中有错误，并不能证明程
序中没有错误。 对于保证软件可靠性来说， 测试
是一种不完善的技术 。
◼程序正确性证明技术 将使软件可靠性更有保证，
测试工作量将大大减少。但是，程序正确性证明
只证明程序功能是正确的，并不能证明程序的动
态特性是符合要求的；正确性证明过程本身也可
能发生错误。
◼目前软件测试 是最广泛采用软件质量保证手段之
一，实用的程序正确性证明技术 并不多见。（2）基于执行的测试
软件项目管理 117◼在20世纪60年代初期，人们已经开始研究程序
正确性证明的技术，提出了许多不同的技术方法。
◼程序正确性证明的基本思想是 证明程序能完成预
定的功能 ，即采用严格数学形式说明程序的功能，
然后根据程序代码证明程序确实能实现它的功能
说明。（3）程序正确性证明
软件项目管理 118◼程序正确性证明的基本原理：
  在程序的若干个点上，提出关于程序变量及它们的
关系的断言 。假设程序的 P1， P2，…，Pn等点上的
断言分别是 a(1)，a(2)，…，a(n)，其中， a(1) 是程
序输入断言， a(n)是程序输出断言 。
  为了证明在点 Pi和Pi+1之间的程序语句是正确的，就
必须证明执行这些语句之后将使断言 a(i)变成
a(i+1) 。如果所有相邻点都完成上述证明过程，则
证明了输入断言加上程序可以导出输出断言。如果
输入断言和输出断言是正确的，而且程序确实是可
以终止的，则上述过程就证明了程序的正确性。
软件项目管理 11912.7  成本－效益分析
◼成本－效益分析的目的，是从 经济角度 评价开发
一个新的软件项目是否可行。
◼成本－效益分析首先估算新软件系统的 开发成本 ，
然后与可能 取得的效益 进行比较权衡。
◼有形的效益可以用 货币的时间价值 、投资回收期 、
纯收入、 投资回收率 等指标进行度量。无形的效
益主要是从 性质上 、心理上 进行衡量。
◼系统的经济效益等于因使用新系统而增加的收入
加上使用新系统可节省的运行费用。
软件项目管理 120◼成本估算的目的，是要求对项目投资。但投资在
前，取得效益在后。因此要考虑 货币的时间价值 。
◼通常用利率表示货币的时间价值 。设年利率为  i，
现已存入  P 元，则  n年后可得钱数为 F
◼例如，在工程设计中用 CAD系统来取代大部分人
工设计工作，每年可节省 9.6万元。若软件生存期
为 5 年，则  5 年可节省 48万元。开发这个 CAD系
统共投资了 20万元。12.7.1 货币的时间价值
niFP) (1+=
软件项目管理 121◼不能简单地把  20 万元与 48 万元相比较。因为前
者是现在投资的钱，而后者是  5 年内相继节省的
钱。
◼需要把  5 年内每年预计节省的钱折合成现在的价
值才能进行比较。
◼设年利率 是 5％，利用上面计算货币现在价值的公
式，可以算出引入 CAD 系统后，每年预计节省的
钱的现在价值，参看下表。
◼实际结果是：  41.563万/20万
软件项目管理 122货币的时间价值
年份 将来值 (万)(1+i)n现在值 (万)累计现在值 (万)
1 9.6 1.05 9.1429 9.1429
2 9.6 1.1025 8.7075 17.8504                              
3 9.6 1.1576 8.2928 26.1432
4 9.6 1.2155 7.8979 34.0411
5 9.6 1.2763 7.5219 41.5630
软件项目管理 12312.7.2 投资回收期
◼投资回收期就是 使累计的经济效益等于最初的投
资所需要的时间 。
◼投资回收期越短，就能越快获得利润。
◼例如，引入 CAD 系统两年以后 ,可以节省 17.85 万
元，比最初的投资还少 2.15万元，但第三年可以
节省 8.29万元，则
          2.15 / 8.29 = 0.259
◼因此，投资回收期是 2.259 年。  
软件项目管理 12412.7.3  纯收入
◼工程的纯收入就是 在整个生存期之内系统的累计
经济效益（折合成现在值）与投资之差 。
◼例如，引入 CAD系统之后， 5 年内工程的纯收入
预计是  41.563－20＝21.563（万元）。这相当于比
较投资一个待开发的软件项目后预期可取得的效
益和把钱存在银行里（或贷款给其它企业）所取
得的收益，到底孰优孰劣。
软件项目管理 12512.7.4投资回收率
◼用投资回收率 来衡量投资效益的大小。
◼已知现在的投资额  P，并且已经估算出将来每年
可以获得的经济效益 Fk，以及软件的使用寿命  n，
k= 1, 2, ..., n。则投资回收率  i，可用如下的方程
来计算：
nn
iF
iF
iFP) (1 ) (1 ) (122
11
++++++=
软件项目管理 126◼这相当于把数额等于投资额的资金存入银行，每
年年底从银行取回的钱等于系统每年预期可以获
得的效益。在时间等于系统寿命时，正好把在银
行中的钱全部取光。
◼此时的年利率是多少呢 ? 就等于投资回收率。

软件项目管理 12712.7.5  成本 -效益分析
◼CAD系统开发的 成本如下表所列：
咨询费
实际设备购置或租用设备费  
筹办 设备安装费  
费用 设备场所改建费 (空调、安全设施等 ) 
资本 
与筹办相关的管理和人员的费用  
开发 操作系统软件的费用  
费用 通信设备安装费用 (电话线、数据线等 ) 
软件项目管理 128开发人员的费用  
开发 人员寻找与聘用活动所需的费用  
费用 破坏其它机构所需的费用  
指导开发活动所需的管理费用  
应用软件购置费  
与 为适应局域系统修改软件的费用  
项目 系统开发所需人员工资、经常性开销等  
有关 培训用户人员使用应用系统的费用  
的 数据收集和建立数据收集过程所需费用  
费用 准备文档所需的费用  
开发管理费  
软件项目管理 129◼分析员可以估算每一项的成本，然后用开发费用
和运行费用来确定投资的偿还、损益两平点和投
资回收期。  系统维护费用 (硬件、软件和设备 )
运行 租借费用 (电费、电话费等 ) 
费用 硬件折旧费  
系统管理、操作及计划活动中涉及人员的费
用 
软件项目管理 13012.7  软件配置管理
◼软件开发过程是一个迭代过程。在此过程中， 变
化不可避免，也很容易失去控制。如果不能适当
地控制和管理 变化，势必造成混乱并产生许多严
重的错误。
   如何才能使变化更正确且更容易被适应，在必须
变化时减少所需花费的工作量？
软件项目管理 131◼软件配置管理 是在软件生命期内 管理变化 的一组
活动， 主要任务是 控制变化 ，同时 标识各个软件
配置项 和各种版本 ，软件配置审计 ，报告变化 。
✓ 标识变化；
✓ 控制变化；
✓ 确保适当地实现了变化；  
✓ 向需要知道这类信息的人报告变化。
▪软件配置管理是 在软件项目启动时就开始 ，并且
一直持续到 软件退役后才终止 的一组跟踪和控制
活动。
软件项目管理 132◼将软件过程的输出信息统称为 软件配置 。软件配
置项可以分为 3类：
✓ 计算机程序 （源代码和可执行程序）
✓ 描述计算机程序的 文档（系统或用户文档）
✓ 数据（程序内包含的或在程序外的）
◼随着软件开发过程的进展，软件配置项的数量迅
速增加，软件配置项的内容随时都可能发生变化。
因此，保证 每个软件配置项正确 ，一个软件的 所
有配置项是完全一致的 。1. 软件配置
软件项目管理 133◼基线是一个软件配置管理概念。
◼IEEE的基线定义 ：已经通过了正式复审的规格说明
或中间产品，它可以作为进一步开发的基础，并且
只有通过正式的变化控制过程才能改变它 。
◼简言之： 基线就是通过了正式复审的软件配置项 。
✓在软件配置项变成基线之前，可以迅速而非正
式地修改它。
✓一旦建立了基线之后，必须应用特定的、正式
的过程来评估、实现和验证每个变化。
软件项目管理 1342. 软件配置管理过程
◼软件配置管理包括如下 5项任务：
✓标识对象 ：唯一地标识 每个配置项 ，然后用合  
适的方法组织它们。区分基本对象与聚集对象。
✓版本控制 ：联合使用 规程和工具，以管理在软
件工程过程中所创建的配置对象的 不同版本 。
  借助于版本控制技术，用户能够通过选择适当
的版本来指定软件系统的配置。
软件项目管理 135✓变化控制 ：把规程和自动工具结合起来，以提供
一个控制变化的机制。
   典型的 变化控制过程 如下：接到 变化请求之后，
首先评估该变化在技术方面的得失、可能产生的
副作用、对其他配置对象和系统功能的整体影响
以及估算出的修改成本。评估的结果形成“变化
报告”，该报告供“变化控制审批者”审阅 。
    “提交”和“ 提取”过程实现了变化控制的两个
主要功能 —访问控制和同步控制。
软件项目管理 136✓配置审计 ：为了确保适当地实现了所需要的变化，
通常从下述两方面采取措施：  
 ①正式的技术复审：关注被修改后的配置对象
的技术正确性；  
 ②软件配置审计：通过评估配置对象的那些通
常不在复审过程中考虑的特征 (如过程 )。
✓状态报告 ：将配置状态的变化写成配置状态报告。
软件项目管理 13712.8 能力成熟度模型
◼能力成熟度模型（ Capability Maturity Model
，CMM) 是卡内基梅隆大学软件工程研究所在美
国国防部资助下于 20世纪80年代末创建的，用于
评价软件机构的软件过程能力成熟度 。
◼事实证明：在无规则和混乱的管理之下，先进的
技术和工具并不能发挥出应有的作用。人们逐渐
认识到， 改进对软件过程的管理是消除软件危机
的突破口 ，再也不能忽视在软件过程中管理的关
键作用了。
软件项目管理 138◼能力成熟度模型的基本思想
✓由于问题是由我们管理软件过程的方法不当引
起的，所以新软件技术的运用并不会自动提高
软件的生产率和质量。
✓能力成熟度模型有助于 软件开发机构建立一个
有规律的、成熟的软件过程 。改进后的软件过
程将开发出质量更好的软件，使更多的软件项
目免受时间和费用超支之苦。
✓软件过程包括各种活动、技术和工具。  CMM的
策略是，力图改进对 软件过程的管理 ，而在技
术方面的改进 是其必然的结果。
软件项目管理 139◼CMM对软件过程的改进采用渐进的模式
  把软件过程从无序到有序的进化过程分成 5个阶段
，对应着 5个成熟度级别，说明了不同级别之间软
件过程的主要变化。  
  CMM指导软件机构通过确定当前的过程成熟度并
识别出对过程改进起关键作用的问题，从而明确
过程改进的方向和策略。通过集中开展与过程改
进的方向和策略相一致的一组过程改进活动，软
件机构便能稳步而有效地改进其软件过程，使其
软件过程能力得到循序渐进的提高。
软件项目管理 1401级-初始层2级-可重复层
软件配置管理
软件质量保证
软件子同合管理
软件项目追踪与监控
软件项目计划
需求管理3级-定义层
同级评审
组间协作
软件产品工程
软件集成管理
培训计划
软件过程定义
软件过程要点5级-优化层
过程更改管理
技术更改管理
缺陷预防
4级-管理层
质量管理
过程量化管理◼软件过程能力 描述
遵循一个软件过程
所能达到的期望结
果的范围。
◼软件过程成熟度 是
指一个特定的过程
被明确定义、管理、
度量、控制以及有
效的程度。能力成熟度模型及关键子过程域
软件项目管理 1411.初始级
 软件过程的特征是 无序的，有时甚至是混乱的 。
几乎没有什么过程是经过定义的（即没有一个定
型的过程模型），项目能否成功完全取决于开发
人员的个人能力。
 其过程能力是 不可预测的，其软件过程是不稳定
的，产品质量只能根据相关人员的个人工作能力
而不是软件机构的过程能力来预测。
软件项目管理 1422. 可重复级
 软件机构建立了 基本的项目管理过程 (过程模型 ),
可跟踪成本、进度、功能和质量 。已经建立起必
要的过程规范，对新项目的策划和管理过程是基
于以前类似项目的实践经验，使得有类似应用经
验的软件项目能够再次取得成功。
 过程能力可以概括为： 软件项目的策划和跟踪是
稳定的 ，已经为一个有纪律的管理过程提供了可
重复以前成功实践的项目环境。软件项目工程活
动处于项目管理体系的有效控制。
软件项目管理 1433. 已定义级
 软件机构已经定义了 完整的软件过程，软件过程
已经文档化和标准化 。所有项目组都使用文档化
的、经过批准的过程来开发和维护软件。
 过程能力可以概括为， 无论是管理活动还是工程
活动都是稳定的 。软件开发的成本和进度以及产
品的功能和质量都受到控制，而且软件产品的质
量具有可追溯性。这种能力是基于在软件机构中
对已定义的过程模型的活动、人员和职责都有共
同的理解。
软件项目管理 1444. 已管理级
 软件机构对 软件过程 （过程模型和过程实例）和
软件产品都建立了定量的质量目标 ，所有项目的
重要的过程活动都是可度量的。
 过程能力可以概括为， 软件过程是可度量的，软
件过程在可度量的范围内运行 。这一级的过程能
力允许软件机构在定量的范围内预测过程和产品
质量趋势，在发生偏离时可以及时采取措施予以
纠正，并且可以预期软件产品是高质量的。
软件项目管理 1455. 优化级
 软件机构集中精力 持续不断地改进软件过程 。这
一级的软件机构是一个以防止出现缺陷为目标的
机构，它有能力识别软件过程要素的薄弱环节，
并有足够的手段改进它们。
 过程能力可以概括为， 软件过程是可优化的 。这
一级的软件机构能够持续不断地改进其过程能力，
既对现行的过程实例不断地改进和优化，又借助
于所采用的新技术和新方法来实现未来的过程改
进。
软件项目管理 146小结
◼软件工程包括 技术和管理 两方面的内容。只有在
科学而严格的管理之下，先进的技术方法和工具
才能真正发挥出威力。因此，有效的管理是大型
软件工程项目成功的关键。
◼软件项目管理包括 预测软件规模 、估算项目工作
量、项目进度安排 、软件质量保证 、成本效益分
析、软件配置管理 、人员组织 等内容。已有研究
为软件项目管理提供了各种 技术方法与工具 。
◼能力成熟度模型 是改进软件过程的有效策略。 基
本思想是，通过改进软件过程提高软件生产率和
软件质量。
