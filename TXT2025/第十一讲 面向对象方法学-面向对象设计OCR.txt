面向对象设计 1软件工程
第四部分  面向对象方法学   
面向对象设计
11.1 面向对象设计的基本原则
11.2 系统设计 (问题域 /界面 /任务 /数据 ) 
11.3 对象设计
11.4 设计模式  (专题报告 ,略)
面向对象设计 2考试时间：下周四下午 15:10~17:10
补课时间，周日晚上 7:00~9:00 ，之后线上答疑
面向对象设计 311.1 面向对象设计的原则
◼面向对象设计分为 系统设计 和对象设计 阶段。
✓系统设计：
①标识系统目标 ：标识并区分各种质量属性的
优先实现次序。
②子系统分解 ：根据用例模型 和分析模型 ，将
系统分解为一系列子系统。
③子系统细化 ：对各子系统不断分解求精，直
到所有的设计目标都能满足为止。
✓对象设计 ：主要是追加一些与 实现有关 的对象，
以及对已有对象进行 细化。
面向对象设计 4设计原则 1：分治
◼软件系统分解为子系统
a)分布式系统可以分解为客户机和服务器；
b)系统可以分解为一系列子系统；
c)子系统可以分解为一个或多个包；
d)包可以分解为类；
e)类可以分解为方法。11.1 面向对象设计的原则
面向对象设计 5设计原则 2：尽可能增加内聚
◼不同内聚类型：优先级从高到低排序
1)功能内聚 ：构件只执行单一计算并返回结果，
没有副作用。如函数过程。
2)层内聚：相关服务放在一起，并有 严格的层次
结构，高层服务可访问低层服务，反之不可。
如分层结构。
3)通信内聚 ：访问或操作同一数据的过程放在一
个类中，这些过程可以互相通信。如某个 类设
计。
面向对象设计 64)   顺序内聚 ：存在一系列过程，其中一个过程
向另一个过程提供输入，这些过程放在一起，
形成顺序内聚。如 消息序列 。
5)过程内聚 ：几个一次调用的过程放在一起，
形成过程内聚。如 调用结构 。
6)时间内聚 ：程序执行过程中同一阶段内完成
的操作放在一起，达到 时间内聚 。
7)实用程序内聚 ：逻辑上不能纳入其他内聚类
型的相关实用程序放在一起，形成实用程序
内聚。如 可复用的过程或类 。
面向对象设计 7设计原则 3：尽可能降低耦合
◼模块间存在相互依赖关系即为耦合。不同耦合类
型从高向低排列有：
1)内容耦合 ：一个构件修改另一个构件内部的数
据，应始终避免。
2)公共耦合 ：一组构件使用全局数据，就产生公
共耦合。应通过封装降低公共耦合。
3)控制耦合 ：一个过程通过标志、开关或命令显
式地控制另一个过程的动作，就产生控制耦合。
降低的方法是采用多态操作。
面向对象设计 84)标记耦合 ：在一个操作的参数表中将类作为
参数，就产生标记耦合。可以改用传递简单
变量或使用接口做参数降低耦合。
5)数据耦合 ：在一个操作的参数表中用简单变
量或简单的类（如 string）作为参数，就产
生数据耦合。应通过减少参数个数降低耦合。
6)例程调用耦合 ：一个例程（或类操作）调用
另一个例程，就产生例程调用耦合。如果出
现例程调用序列，降低的方法是编写一个例
程将这个调用序列封装起来。
面向对象设计 97)类型使用耦合 ：类将实例变量或本地变量声
明为另一个类的实例，就产生类型（嵌套）
使用耦合。可将变量的类型声明为包含所需
操作的最通用的类或接口 。
8)包含 /引入耦合 ：一个构件引入（ import）
一个包时就产生引入耦合，一个构件包含
（include）另一个构件时，就产生包含耦
合。
9)外部耦合 ：模块对外部系统，如操作系统、
共享库或硬件有依赖关系时就产生外部耦合。
可通过信息隐蔽减少这种依赖关系。
面向对象设计 10设计原则 4：尽可能提高抽象层次
◼设计应隐藏或推迟考虑细节以降低复杂性 。
✓类是包含过程 抽象的数据抽象。
✓使用泛化关系（父类）和接口 ，可进一步提高
抽象层次。
✓类中公有操作越少，抽象程度越高。
✓类中所有变量都是私有的，抽象程度达到最高。
◼抽象可确保在设计时不必关心不必要的细节，能
把握问题的本质 并做出重要的决策。
面向对象设计 11设计原则 5：尽可能提高可复用性
◼可以在算法、类、过程、框架和完整应用程序
的级别上创建可复用性。
◼复用构件的机制包括 过程调用 和继承父类 。
设计原则 6：尽可能复用已有的设计和代码
◼复用已有的设计是对可复用性设计的补充。通
过复用可从以往对可复用构件的投资中获益。
面向对象设计 12设计原则 7：灵活性设计
◼积极预测将来可能在实现和功能上的变化 ，并采
取相应措施。
◼在设计中引入灵活性的方法有：
✓降低耦合并提高内聚（易于提高替换能力）
✓建立抽象（创建有多态操作的接口和父类）
✓不要将代码写死（消除代码中的常数 ）
✓抛出异常（由操作的调用者处理异常）
✓使用并创建可复用的代码
面向对象设计 13设计原则 8：预计过期
◼积极预测将来可能在技术和运行环境上的变化，
并为此采取相应措施。
◼在设计中应遵循的预计过期的规则有：
✓避免使用 早期发布 的技术
✓避免使用针对特定环境的软件库
✓避免使用软件库中未编档的或很少使用的功
能
✓避免使用 小公司或可能不提供长期支持 的公
司提供的可复用构件或特殊硬件
✓使用众多厂商支持的标准语言和技术
面向对象设计 14设计原则 9：可移植性设计
◼可移植性设计的主要目标是让 软件在尽可能多的
平台上运行 。实现可移植性的规则有：
✓避免使用特定环境的专有功能
✓使用不依赖特定平台的程序设计语言
✓小心使用可能依赖某一平台的类库
✓了解其他语言可能依赖特殊硬件结构的功能和
文本文件的差异
面向对象设计 15设计原则 10：可测试性设计
◼设计时采取措施使得测试易于进行 。
◼可测试性设计的最重要的方法是保证代码的所有
功能都能脱离图形用户界面执行。
面向对象设计 16设计原则 11：防御性设计
◼为提高可靠性，应确保不引入任何缺陷，能够处
理其他代码不适当使用构件引起的问题。
◼按契约设计是防御性设计技术，其核心思想：
✓被调用操作为正常执行必须满足的 前置条件 ：
调用操作在调用一个操作时有责任确保该操作
的前置条件成立。
✓被调用操作正常执行所得到的结果即为 后置条
件 ：要求被调用操作在返回前有责任保证这些
后置条件成立。  
面向对象设计 17✓被调用操作在执行时确保不会被修改的 不变量
(invariant) 。
◼前置条件、后置条件和不变式都是布尔表达式，
其计算结果为假，表示有错误发生。
◼可以使用断言机制。在重要构件的边界（如层）
应始终保留严格的断言检测。
面向对象设计 18◼系统设计的主要活动是进行 子系统分解 ，并在此
基础上定义 子系统／构件之间的接口 。
✓首先，根据子系统 可提供的服务来定义子系统
（以后在对象设计中再根据子系统能提供的操
作来定义子系统的接口），
✓然后，对 子系统细化，建立层次结构 。要求对
子系统的分解尽可能做到高内聚、低耦合。11.2 系统设计
面向对象设计 191)子系统和类
✓在应用领域，为降低其复杂性，用类进行标识。
在解域，为降低其复杂性，将系统分解为多个 子
系统，这些子系统又由若干表示解域的 类构成。
✓可以把子系统分解为更小的子系统。
系统 部分
子系统 类* *11.2.1 系统设计的概念
面向对象设计 20✓在Java显式地提供了子系统的构造，即采用了
“包” 。
✓C++没有显式地提供子系统的构造，可按问题
需要对类分组。
面向对象设计 212)服务和子系统接口
✓一个服务是一组有公共目的的相关操作。而
子系统的特征是由该子系统提供给其他子系
统的服务 来刻画。
✓供其他子系统调用的某个子系统的操作集合
就是子系统的 接口。子系统的接口包括 操作
名、操作参数类型 及返回值。 
✓系统设计注重每个子系统提供服务的定义，
即枚举所有的操作、操作参数和行为。
面向对象设计 22✓当编写子系统接口的文档时，不应涉及子系
统实现的细节，其目的是减少子系统之间的
依赖性，希望一旦需要修改子系统实现时，
降低由于子系统变更而造成的影响。
面向对象设计 233)子系统分层和划分
✓子系统分层 的目的是建立系统的层次结构。
每一层仅依赖于它下一层提供的服务，而对
它的上一层可以一无所知。
✓下图是一个三层的系统结构。
E: 子系统 F: 子系统 G: 子系统B: 子系统 C: 子系统 D: 子系统A: 子系统
面向对象设计 24✓在层次结构中，子系统 A、B、E构成了一个
称之为垂直切片 的系统分解子集。
✓如果每一层只能访问与其相邻的下一层，则
称之为封闭体系结构 ；如果每一层还可访问
比其相邻下一层更低的层次，则称之为 开放
体系结构 。
面向对象设计 25✓封闭体系结构 的例子就是
开放系统互联参考模型，
它由七层构成。每一层负
责执行一个已预先定义好
的协议功能。每一层都为
其上一层提供服务，使用
其低层的服务。
✓封闭体系结构 的子系统之
间满足低耦合，但产生速
度和存储管理的问题，会
导致某些非功能属性难以
满足。数据链层
物理层网络层传输层会话层表示层应用层
抽
象
层
次
比特流数据帧包消息接口连接格式
面向对象设计 26✓开放体系结构 的一个例子是 Java的Swing用户
接口包。它允许人们绕过高层直接访问低层接
口以克服性能瓶颈。
AWT
XlibSwingApplication
面向对象设计 27✓划分是将系统分解为独立的子系统 ，每个子系
统负责某一类服务。
➢例如，一个车辆管理所的管理信息系统分
为车管所 组织机构管理 、车辆管理 、车主
管理和法律事件管理 等 4 个子系统。
➢每一个子系统对其他子系统的依赖度很低。
面向对象设计 28✓分解子系统时，首先进行 划分，将一个系统分
成几个高层的子系统， 每个子系统负责一种功
能，或运行在某特定的硬件节点上 。
✓再将各子系统 分层处理，分解成层次更低的小
子系统。
✓过度分解会导致子系统之间接口的复杂化。
面向对象设计 2911.2.2 系统设计的目标
◼明确设计目标，是系统设计的第一步。 有一些设
计目标是 从用户那里得到 ，更多的设计目标是从
非功能需求 或应用领域中抽取 出来。
◼设计目标 可以从以下  5 组设计准则中选择 。
◼性能、可靠性和最终用户准则 往往从需求中明
确地获取 ，也可以 从应用领域中获取 ；
◼成本和维护准则由客户和供应商提出 。
◼将设计目标清楚地陈述，可以根据设计准则，做
出重要的设计决策。
面向对象设计 30性能准则
设计准则 定    义
响应时间 用户提交请求后多长时间可得到系统的确认
吞吐量 在一段固定时间内系统能够处理多少任务
内存系统运行需要占用多少内存空间
可靠性准则
设计准则 定    义
鲁棒性 面对非法用户进入后系统的存活能力
可靠性 明确期待的行为与观察到行为之间的差别
可用性 系统能够用来完成正常任务的时间百分比
容错性 在出错条件下系统的操作能力
保密性 系统忍受恶意攻击的能力
安全性 再出现错误时系统避免威胁到人类生命的能力
面向对象设计 31成本准则
设计准则 定    义
效用系统支持用户工作的困难程度
易用性 用户使用系统的困难程度最终用户准则设计准则 定    义
开发成本 开发系统初始版本的成本
部署成本 安装系统并培训用户的成本
升级成本 从原有系统中导出数据的成本，此准则导致了向
后兼容性需求
维护成本 需要进行错误修复和增强系统的成本
管理成本 需要对系统进行管理的成本
面向对象设计 32维护准则
需求的可
追踪性将代码映射到特定需求上的困难程度设计准则 定    义
可扩展性 向系统中添加功能或新类的困难程度
可修改性 更改系统功能的困难程度
可适应性 将系统发送到不同应用领域的困难程度
可移植性 将系统移植到不同平台的困难程度
可读性 通过阅读源代码来理解系统的困难程度
面向对象设计 33◼在定义设计目标时，希望开发一个既安全可靠，
又廉价的系统是不现实的，因此开发人员应当对
所有可能的设计目标进行权衡，对必须的设计目
标赋予优先级别。
◼一旦有了清晰的设计目标，就可以开始系统的初
始分解。
权  衡 基 本 原 则
空间与速度 如果软件的响应时间或吞吐量不满足需求，则
可以使用更多的存储空间来加快软件的执行速
度。如果软件太大，则可以牺牲一定的速度对
数据进行压缩处理。
面向对象设计 34权  衡 基 本 原 则
交付时间与
功能如果开发进度滞后于计划，则按时交付的功能
可以少于预定交付的功能，或推迟交付所有功
能。契约软件通常更强调功能，而商业外购软
件则更强调交付日期。
交付时间与
质量如果测试滞后于计划，则可以按时交付带有错
误的软件，或推迟交付带有少量错误的软件。
交付时间与
人员配置如果开发进度滞后于计划，可以在项目中增加
资源以提高生产率。在多数情况下，这种选择
只适用于早期项目。新的人员要经过培训方可
使用。这样中途增加资源通常会降低生产率，
还会增加软件开发的成本。
面向对象设计 3511.2.3 子系统分解
◼软件体系结构设计的第一步是做子系统分解，从
而搭建软件体系结构的架构。
◼在系统设计中寻找子系统，与在分析过程中寻找
对象的情况类似。在面向对象分析中介绍的
Abbotts启发式准则，同样适合于子系统的识别。
◼初始子系统应该从需求的功能模型（用例模型）
中导出。这方面有多种分解方案 。
◼例如， Coad & Yourdon 基于 MVC模型，将系统
大致分为 问题领域 、人机交互 、任务管理 、数据
管理等 4 个子系统。
面向对象设计 3611.2.4 问题领域子系统
◼首先复制分析模型为设计模型中的问题领域部分，
然后根据设计目标，对该部分进行修改 。
可复用的设计／编程方面的类  
✓根据需要，从类库选择可复用类、商业外购
构件和遗留构件，把它们增加到问题解决方
案中去。
✓标明复用类或构件中不需要的属性和操作。
✓增加从复用类（构件）到分析类之间的泛化
关系，继承复用类（构件）的属性和方法。
面向对象设计 37✓把分析类中因继承复用类（构件）而成为多余
的属性和操作标出。
✓修改分析类的结构和连接。
加入泛化类以建立类间协议
✓有时某些分析类要求一组类似的服务 。此时，
以这些分析类作为子类，定义一个父类。该父
类定义为所有这些子类共用的一组服务名，作
为公共的协议，用来与数据管理或其他外部系
统部件通信。 这些服务都是虚函数。在各个子
类中定义其实现 。
面向对象设计 38对泛化关系进行调整
✓在分析模型中可能包括有 多继承关系，但实现时
使用的程序设计语言可能只有 单继承，甚至没有
继承机制，这样就需变更问题领域部分中类的层
次结构。
✓针对单继承语言的调整  
➢把子类对象看做是父类对象所扮演的角色，通
过关联关系把多继承的层次结构转换为单继承
的层次结构。
➢把多继承的层次结构平铺，成为单继承的层次
结构。在这种情况下，有些属性或操作在同层
的子类中会重复出现。
面向对象设计 39✓针对无继承语言的调整
➢当使用无继承的编程语言时，必须把具有泛
化关系的类层次平铺开，成为一组对象。多继承关系通过关联关系
分解多继承平铺为单继承人
医生 教授
医学教授人
角色
医生 教授1
*人
医生 教授 医学教授二
面向对象设计 40修改设计以提高性能
✓提高执行效率是系统设计的主要目标之一。有
时必须改变问题领域的结构以提高效率 。
✓如果类之间经常需要传送大量消息，可合并相
关的类，使得通信成为对象内的通信，而不是
对象之间的通信，或者使用全局数据作用域，
打破封装的原则，以减少消息传递引起的速度
损失。
✓增加某些属性到原来的类中，或增加低层的类，
以保存暂时结果，避免每次都要重复计算造成
速度损失。
面向对象设计 41✓为提高性能，在对分析模型进行大规模的改动之前，
应考虑下面一些问题：
➢不要认为象 C++之类的 OOPL就一定效率高。
事实表明，非 OOPL的紧凑代码的效率比
OOPL的效率高近 10倍，但用非 OOPL编程会
令程序员非常疲劳，容易出错。
➢提高一个现存系统的工作效率比重新设计一个
高效的系统要容易。 一开始应当建立一个原始
的简单的设计，实现和调试不会太困难。如果
对设计有性能要求，只需加入少量的工作就可
以了。
面向对象设计 42➢通常系统 80%的开销都集中在 20%的代码段上。
与其为了尽量处处节省系统开销而破坏完善的系
统结构，还不如找出系统开销最集中的地方，只
对那部分做优化。
➢预测软件开销集中在什么地方是困难的 。 进行优
化最有效的方法是在系统运行时使用性能监测工
具对系统进行观测。一些像继承、动态绑定、消
息传递等处理虽然看起来简单，但需要大量的系
统开销。在代码复杂性与运行的低效之间没有相
关性。
➢提高性能最好的方法是 采用好的解决方案 ，而不
是拼命地去节省几个微秒、几个字节。
面向对象设计 43电梯控制系统 ECS的问题领域子系统
◼决定使用一个中央控制器（电梯控制器）控制和
协调电梯的所有动作，包括解决电梯每到一个楼
层减速问题。
◼增加“电梯监视器”，用一个独立的对象来执行
监测功能（性能、安全性等）。在提交给实现者
的规格说明中，将这个类放在一个与 ECS的主处
理器分离的处理器上 .  
◼每个类增加服务 Self Test来增强每个类的性能。
在运行时执行有必要验证其功能的操作，并向电
梯监视器报告。
面向对象设计 441 1
1 11
1
*
1
1
11
1
11..*1
电梯事件电梯调度器
电梯控制器
电梯监视器到达面板 目的地面板面 板
楼 层
目的地事件 召唤事件 到达事件
召唤面板电梯马达
超载传感器电 梯
1..
1..*
面向对象设计 4511.2.5  人机交互子系统
◼设计一个良好的 用户界面 是成功地实现一个软件
系统的关键。在 开发分析模型 时，有意避开了如
窗口、屏幕等依赖于实现的细节，目的是让系统
规格说明独立于实现。
◼人机交互子系统在 系统行为 和用户交互 的实现之
间架起了一座桥梁。例如，可用  GUI 实现系统的
用户界面。但当用户提出来改用语音对答式交互
时，应当使这种改变尽可能容易。为此，只需将  
GUI 式人机交互 子系统替换成 语音对答式人机交
互子系统即可， 系统其它部分都应保持不变 。
面向对象设计 46例如，某杂志发行系统的人机接口
设计用户界面
✓用户界面是一个 传统的 GUI。其中有许多窗
口对象。但 在用户与系统进行交互期间 ，只
能有一个窗口呈现在用户面前 。 
✓通过使用聚合关系，窗口对象可以进一步分
解为各种文本域、选择按钮、图符等。
✓如果使用某种  GUI 构筑软件包，只需对软件
包输入合适的参数，该软件包就能提供所有
的文本域、选择按钮、图符等，将这些细节
作为窗口的属性就可以了。
面向对象设计 47订阅项
目窗口续订项
目窗口订阅管理
选择按钮编辑管理
选择按钮订阅管理窗口 编辑管理窗口 特殊订单窗口
文章
窗口作者
窗口刊物
窗口付款项目窗口SBSS窗口
零售价
格追踪基本订
户追踪免费
赠阅查询
窗口
面向对象设计 48✓只要描述清楚 所需要的窗口，这些窗口的导
航细节，详细的窗口成分 ，我们就可以用现
有的技术和工具来实现它们。
其他描述人机交互模型的工具
✓在描述复杂的菜单系统（ GUI窗口）的拓扑
结构时，常使用 状态图或菜单树。
✓用于 SBSS的单层状态图：
➢每一个状态是GUI的一个窗口
➢每一个迁移代表了窗口之间的切换
➢与每个迁移相关联的是一个 条件  / 动作对
➢条件代表了用户选择 ，它导致迁移的发生
➢动作代表了迁移发生时产生的请求
面向对象设计 49SBSS
订阅项目
菜单
特殊订
单窗口
帮助
窗口
编辑管
理窗口订阅管
理窗口ALT+F,X
返回起
始菜单ALT+S
订阅管理ALT+F,X
返回起
始菜单ALT+D
特殊
订单
ALT+H
帮助
工具
ALT+F,X
返回起始菜单
ALT+F,X
返回起始菜单ALT+S
编辑
管理
面向对象设计 50✓菜单树可以让用户 直观地看到如何在界面上巡
航。用菜单树表示人机交互的基本结构，有助
于全局用户界面的可视化。例如，可以了解有
多少种不同的方式能够访问“地址”的窗口。
✓用户界面可尽量采用清真
 寺式的结构： 在界面的上
 层，希望扇出大于扇入 ，
 表明用户可以有多个可供
 选择的选项。 在界面的低
 层，希望扇入大于扇出 ，
 表明一个单独的界面可以
 被多个双亲使用。
面向对象设计 51SBSS订阅系统
订阅管
理窗口
订阅事
务窗口
地址
窗口事务认
定窗口付款事
项窗口
查询
窗口
查询显示
窗口  (a)查询显示
窗口  (b)查询显示
窗口  (c)查询显示
窗口  (d)查询显示
窗口  (e)编辑管
理窗口
作者编
辑 / 显
示窗口文章编
辑 / 显
示窗口刊物编
辑 / 显
示窗口
地址
窗口事件挂
起窗口开始菜单 /
帮助窗口
特殊订
单窗口
地址
窗口付款事
项窗口菜
单
树
面向对象设计 52◼人机交互子系统的设计过程
1)用户分类
✓按技能层次分类 ：外行／初学者／熟练者／
专家
✓按组织层次分类 ：行政人员／管理人员／专
业技术人员／其它办事员
✓按职能分类 ：客户／职员
2)描述人及其任务的脚本
 对以上定义的每一类用户，考虑以下问题： 谁、
目的、特点、成功的关键因素 、熟练程度 以及
任务脚本 。
面向对象设计 53
在
OOATOOL
TM 
中有一个例子：
✓谁：分析员
✓目的：要求一个工具来辅助分析工作   (摆脱
繁重的画图和检查图的工作 )。
✓特点：年龄 : 42岁；教育水平 : 大学；限制 :
不要微型打印，小于 9个点的打印太小。
✓成功的关键因素 ：工具应能使分析工作顺
利进行；工具不应与分析工作冲突；工具
应能捕获假设和思想，能适时做出折衷；
应能及时给出模型各个部分的文档。
面向对象设计 54✓熟练程度 ：专家。
✓任务脚本 ：
主脚本：
－识别“核心的”类和对象；
－识别“核心”结构；
－在发现了新的属性或操作时随时都可
以加进模型中去。
 检验模型：
－打印模型及其全部文档。
3)设计命令层
面向对象设计 55✓研究现行的人机交互活动的内容和准则 。这
些准则可以是非形式的，如  “输入时眼睛不
易疲劳”，也可以是正式规定的；
✓建立一个初始的命令层 。可以有多种形式，
如一系列  Menu Screens 、或一个  Menu Bar 、
或一系列 Icons.
✓细化命令层 。考虑以下几个问题。
➢排列命令层次。把使用最频繁的操作放在
前面；按照用户工作步骤排列。
➢
通过逐步分解，找到整体－局部模式，以
帮助在命令层中对操作分块。
面向对象设计 56➢根据人们短期记忆的  “7±2” 或 “每次记忆  
3块／每块  3 项”  的特点，把菜单深度尽量
限制在三层之内。
➢减少操作步骤：把点取、拖动和键盘操作减
到最少。
4)设计详细的交互
✓用户界面设计有若干原则，包括：
➢一致性：采用一致的术语、一致的步骤和一
致的活动。
➢操作步骤少 ：减少敲键和鼠标点取的次数，
减少完成某件事所需的下拉菜单的距离。
面向对象设计 57➢不要“哑播放” ：每当用户等待系统完成一
个活动时，要给出一些反馈信息。
➢Undo：在操作出现错误时，要恢复或部分
恢复原来的状态。
➢减少人脑的记忆负担 ：不应在一个窗口使用
在另一个窗口中记忆或写下的信息；需要人
按特定次序记忆的东西应组织得容易记忆。
➢学习的时间和效果 ：提供联机的帮助信息。
➢趣味性：尽量采取图形界面，符合人类习惯。
面向对象设计 585)继续做原型
✓开发用户界面原型 ，可对提交的人机交互活
动进行体验、实地操作，并精炼成一致的模
式。
✓使用快速原型工具或应用构造器，对各种命
令方式，如菜单、弹出、填充以及快捷命令，
做出原型让用户使用，通过用户反馈、修改、
演示的迭代，使界面越来越有效。
面向对象设计 596)设计人机交互类
✓对窗口进一步细化，通常包括：类窗口、条
件窗口、检查窗口、文档窗口、画图 窗口、
过滤器窗口、模型控制窗口、运行策略窗口、
模板窗口等。
✓设计人机交互类，首先从组织窗口和部件的
用户界面界面的设计开始。每个类包括窗口
的菜单条、下拉菜单 、弹出菜单 的定义。还
要定义用于创建菜单、加亮选择项、调用相
应响应的操作。
面向对象设计 607)根据图形用户界面进行设计
✓建立图形窗口，确定字型、坐标系统。
✓建立事件响应机制。
面向对象设计 61◼设计人机交互子系统的 启发式准则
每一个组织和用户都有其文化背景。可能不仅
仅意味着语言、传统和习惯。由于所建立的系统
面对的是用户，因此， 其界面必须必须与用户的
文化背景相一致 。
 一种适应用户文化背景的有效方法是“ 可视化表
示”。目的是让计算机界面适应用户。例如有一
个客户开发了一个财务管理软件，它以政府规定
的各种计算方法和表格作为其可视化表示。对于
这样的用户界面，学习和掌握它非常简单和容易。
面向对象设计 62使用用户开发的场景或使用事例来驱动界面 。
为避免用户界面太复杂，先观察用户是如何完
成其工作的。在执行一个特定的工作时，用户
界面应能告诉用户下面将做什么。
应当首先定义一个高层的用户界面和一些详细
的对话框 ，然后定义人机交互对象 ，从而完成
设计。需要建立原型对所有人机交互界面设计
进行严格的检验。
人机交互子系统的设计应从建立分析模型时就
开始着手。在开发系统的人机交互子系统时，
应允许用户对其试用。
面向对象设计 63多数用户都不会从头开始设计人机交互类 。
事实上，使用各种所谓的可视化开发环境，
如Delphi, PowerBuilder 、Vasual Basic 、Vasual 
C++、Borland C++ builder 等，开发人员可能
连人机交互子系统都不要。直接使用这些工
具提供的控件，就可以作出用户界面。
 用户可以不需要 HIC，但不能免去用户界面的
设计。使用菜单树或状态，连同某些原型，
来说明用户界面的设计思想。
面向对象设计 6411.2.6  任务管理子系统
◼在应用中，每一个对象中的每一个服务最终都要
被分配给某一个计算机任务。这样一些任务可以
被看作是一些独立的可调度的实体。
◼任务管理子系统的 任务为：
✓将子系统映射 到构件和处理器上
✓标识并存储 持久性数据
✓提供访问控制
✓设计全局控制流
◼通常利用 UML构件图和部署图 展示。
面向对象设计 65（1）将子系统映射到构件和处理器
选择硬件配置和平台
✓许多系统运行在网络上。使用多台计算机，
可以满足高性能计算需求和多个互联的分布式
用户需求。确保将子系统分布到多台计算机上，
设计基础设施来支持子系统之间的通信。
✓选择硬件配置包括选择 虚拟机，系统将在其
上运行。虚拟机包括 操作系统 和所需软件构件 ，
如数据库管理系统和通信包。构件提供的功能
越多，所需的开发工作量越少。
✓虚拟机的选择 还受客户约束和成本限制影响 。
面向对象设计 66✓例如，在车辆路程规划系统中，规划子系统
和路由子系统运行在两个不同的节点上。硬
件分配的情况如下：
将对象和子系统分配到节点上:OnBoardComputer
Routing
subsystem:WebServer
Planning
subsystem
将路由子系统分配到
车载计算机上规划子系统分配到基于
Web的网络服务器上
面向对象设计 67✓将对象和功能分配到各个节点 上时，为了在节
点之间传输数据，需对新加入的对象和子系统
进行标识。
✓例如，在车辆路程规划系统中，路由子系统和
规划子系统共享了 行程类、目的地类 、交差口
类、路段类和方向类的实例，它们需采用一些
通信协议，可通过无线调制解调器进行通信，
可创建一个通信子系统来支持该通信 。
✓旅途规划的内容分布在路由和规划子系统中，
在路由子系统中创建 路段代理类 和行程代理类
为规划子系统中的路段和行程提供代理服务。
面向对象设计 68✓当司机需要重新规划行程路线时，行程类对象会
向通信子系统发出请求，检索规划子系统中有关
路段的信息。最后，通信子系统将一个完整的旅
途线路从规划子系统转移到路由子系统中。
通信子系统
消息
连接规划子系统
规划服务
行 程
路 口方 向目的地
行程段路由子系统
线路助手
位 置
行程代理
路段代理
面向对象设计 69✓将某一子系统分配到硬件节点上，意味着能够将
功能和处理能力分配到最需要这些子系统的地方。
随之而来的问题就是子系统中的 数据存储、数据
转移、数据复制和同步数据 等问题。
面向对象设计 70▪持久性数据的生存周期 要长于系统的一次执行周
期。例如，在图书管理系统中将借阅者借阅的图
书信息和借阅者信息记入借阅记录并存储在数据
库相应文件中，该文件以后可以再次打开。
◼数据在系统中的 存储位置 和存储方式 将会影响到
系统的分解。特定数据库管理系统的选择也会影
响全局控制策略和并发管理。（2）标识并存储持久性数据
面向对象设计 71▪例如，在车辆路程规划系统中，把当前行程信息
存储在磁盘文件中是最简单、最有效的。为此，
在系统中添加 行程文件存储子系统 和映射数据库
存储子系统 。
◼前者负责 将旅程路线信息 存储到车载计算机的文
件中。该文件只支持整个旅程数据的快速存储和
载入，以在车辆故障恢复时使用。后者负责 将地
图和旅程 数据存储到规划子系统的数据库中 。该
子系统支持多个并发的的司机和规划代理。
面向对象设计 72标识持久性对象 。候选的持久性数据是从分析
过程中标识出的 实体类对象 ，以及边界类对象 。
通常可以在系统关闭后，检查所有必须保存的
类，以标识出必须长久保存的持久性对象。这
里的系统关闭可以是受控关闭，也可以是系统
崩溃。行程文件存储
子系统通信子系统
映射数据库存储
子系统路由子系统 规划子系统
面向对象设计 73选择存储管理策略 。决定如何存储这些持久性
对象的决策常常受到如下非功能属性的制约：
✓对象能否快速检索出来
✓是否必须执行复杂的查询来检索这些对象
✓这些对象是否需要大量的内存和磁盘空间
◼在多用户系统中， 不同参与者对不同的功能和
数据可有不同的访问权限 。
◼例如，一个 普通用户参与者 可能仅能访问其所
创建的数据，而一个 系统管理员参与者 对系统
数据和所有用户数据具有无限的访问权限。（3）提供访问控制
面向对象设计 74◼在需求获取和分析建模过程中，将 不同用例关联
到不同的参与者 ；在系统设计过程中， 定义共享
对象、参与者通过访问控制进行访问的权限、数
据加密的方式 等。
✓例如，在车辆行程规划系统中，在同一数据库
中存储地图信息和行程信息 会引发安全问题，
必须确保行程仅 被发送给创建这些行程的司机 。
✓为此，可将司机类与行程类关联起来。 规划子
系统负责在发送行程之前对司机进行识别 ，最
后根据两子系统之间的通信信息是否加密进行
决策。
面向对象设计 75◼可以用访问矩阵 对类的访问控制进行建模：
✓矩阵的行列出系统中的参与者
✓矩阵的列列出要进行控制的类
✓矩阵元素列出参与者在类实例上能执行的一组
操作，也称为访问权。
◼访问矩阵 定义了静态访问控制。还可以采用 代理
模式定义动态访问控制。
◼例如，可以为每一个被访问的类实例 创建一个代
理对象，由代理对象检查访问者的访问权限。如
果访问者具有相应的访问权限，则访问可执行，
否则，访问失败。
面向对象设计 76（4）全局控制流设计
◼典型的控制流机制有三种：
①过程驱动控制
②事件驱动控制
③线程机制
◼一旦选择了控制流机制，就可以采用一个或多
个控制对象来实现它。控制对象的作用是 记录
外部事件 ，存储其有关状态 ，给出接口上的操
作调用、与外部事件相关联的实体对象操作调
用的正确顺序。
面向对象设计 7711.2.7 数据管理子系统
◼数据管理子系统提供了在数据管理系统中存储和
检索对象的基本结构，包括对持久性数据的访问
和管理。
◼它分离了数据管理机制所关心的事项，包括文件、
关系型数据库管理系统或面向对象数据库管理系
统等。
◼数据管理的方法主要有  3 种：文件管理、关系数
据库管理 和面向对象数据库管理 。
◼下面给出选择数据管理方法的规则。
面向对象设计 78类型 选  择  规  则
(1) 存在大量的数据（如图像）
文件 (2) 存在临时数据（如内存文件）
(3) 存在低密度信息（如档案文件、历史日志）
关系型或 (1) 存在并发访问
面向对象 (2) 访问比较合适的细节层
数据库 (3) 对相同数据的多重平台或应用
关系型 (1) 属性上的复杂查询
数据库 (2) 存在大数据量
面向对象 (1) 为检索数据扩展关联的使用
数据库 (2) 中等规模的数据集
(3) 对象之间的不规则关联
面向对象设计 79◼文件是一种由操作系统提供的数据组织 ，应用程
序以字符流的形式存储其数据。应用程序可定义
用什么方式、在什么时间来检索这些对象。但文
件使用时必须考虑很多问题，如并发访问和系统
崩溃情况下的数据丢失问题。
◼关系数据库管理系统可以遵照预先定义好的结构
类型进行存储 。它使用若干表格来管理数据，表
中每一列代表一个属性，每一行代表一个属性元
组值的数据元素。这种类型的数据库提供了并发
管理、访问控制和故障恢复服务，但对非结构化
数据（如图像、自然语言文本），速度较慢。
面向对象设计 80◼面向对象数据库管理系统提供的服务与关系型数据
库管理系统类似 。不同之处在于，面向对象数据库
以对象和关联的方式存储数据。它还提供了继承和
抽象数据类型，极大减少了存储子系统的开发时间，
但其查询速度慢，且不容易调试。
面向对象设计 8111.3 对象设计
◼对象设计的主要任务是 追加解空间的对象 和对已
有对象进行细化 。对象设计包括：
①复用：寻找可利用的已有解决方案，包括可
复用类库、商业外购构件和 设计模式 。
②服务规格说明 ：精确描述每个类的接口。
③重构对象模型 ：改进对象设计模型，以提高
可读性和扩展性。
④优化对象模型 ：改进对象设计模型，以满足
性能标准。
面向对象设计 8211.3.1 使用模式设计对象
◼对象设计的一个任务是在 应用对象 与系统设计 所
标识的硬件／软件平台之间建立连接。
◼开发人员可以复用已有的类，建立设计模型中已
定义解对象的细化对象，或追加一些自定义的解
对象。还可以复用设计模式。复用 的 4 个步骤为：
选择、分解、配置和演变。
1.选择
✓开发一个新对象最简单的方法是 从已有构件中
简单地选择合乎需要的软件构件 。
面向对象设计 83✓为此，需要利用一些商业外购构件库或遗留软件构
件库。这些构件库提供以下层次的构件：
①特定小组的可复用构件 （一个小组为他们自己
组内所有成员使用而开发）
②特定项目的可复用构件 （一个小组为某一个项
目而开发）
③特定问题领域的可复用构件 （购自某一个特定
领域的软件销售商）
④通用构件 （购自专门提供构件的销售商）
⑤特定语言原操作 （购自一个编译器的销售商）
面向对象设计 842.分解
✓最初标识的“类”常常是几个概念的组合 。
在着手对象细化设计时，可以把一个类分成
几个类，使得新标识的类容易实现，或它们
可以从已有的类中获得。
3.配置
✓在设计类时，可能会要求由已有类的实例提
供类的某些特性。 通过把相应类的实例声明
为新类的属性来配置新类 。
✓例如，一种 仿真服务器 可能要求使用一个 计时
面向对象设计 85器来跟踪服务时间。设计者应找到 计时器类 ，
并在服务器类 的定义中声明它。这个服务器
还要求有一个 队列类的实例来作客户排队工
作。
4.演化
✓要创建的 新类可能与一个已有类非常类似 ，
但不完全相同。此时，可以利用继承机制。
调整继承结构，加入合乎需要的新类的处理
有三种可能的方式。
面向对象设计 86a)建立一个新类 起重车。它的底
盘、发动机、轮胎、驱动装置
等都在已有类 汽车中。关系如
右图所示。新类是已有类的特
殊情形。这时直接让 起重车类
作为汽车类的子类即可。起重车
类
汽车类
汽车
载重车
 大轿车
 救火车
 起重车
面向对象设计 87b)增加一个新类 拖拉机。它的底盘、发动机等与
汽车不同，但 驱动装置 、轮胎等与汽车相同。
✓调整继承结构。建立一个新的一般的 车辆类，
把拖拉机与汽车类的共性放到 车辆类中，拖拉
机与汽车类都成为车辆类的子类。
✓车辆是抽象类，相关操作到子类 汽车找
。
汽车
 拖拉机
车辆汽车
拖拉机
面向对象设计 88c)另一种情形是在已有类的基础上加入新类，
使得新类成为已有类的泛化类。
✓例如，已经存在 三角形类 ，四边形类 ，想加
入一个多边形类 ，并使之成为 三角形和四边
形类的泛化类。
三角形类
四边形类多
边
形
类
 六边形
多边形
四边形
 三角形
面向对象设计 8911.3.2 设计接口规格说明
◼接口规格说明 的目标：足够清晰地描述每一个对
象的接口，为实现这个对象打下基础。设计接口
规格说明的主要活动包括：
1.标识遗漏的属性和操作
✓检查每一个子系统提供的服务以及每一个
分析对象；标识需要子系统服务实现，但
却遗漏的属性和操作。为此 对当前对象设
计模型细化 ，对所用到的操作参数细化 。
面向对象设计 902.标识类型、可见性和签名
✓确定哪些操作可以提供给外部其他对象或子系
统使用，哪些操作只能属于同一类的对象。还
要说明每一个操作的返回类型、参数的数目和
类型。
✓本活动的目标是建立并提供一个较小且简单的
接口，便于使用者理解和使用；同时降低子系
统之间的耦合度，便于系统的更新。
3.描述前置条件和后置条件
✓为每个类的所有公有操作订立契约，即存在于
类使用者和类实现者之间的一个协议。通过 前
面向对象设计 91置条件描述类使用者必须遵守的那部分契约，
即操作正确执行必须满足的先决条件； 后置条
件描述类使用者在遵守相关部分契约之后，类
实现者应当保证相关操作能够正确执行，并在
执行之后契约得到满足。
3.描述不变式
✓不变式是一种与类和接口有关的约束，通常用
来表明类的实例中所有属性和操作都必须遵守
的一种契约 。
✓例如在保龄球赛类 中有  3 个方法： addPlayer ()
增加一个选手、 removePlayer ()删除一个选手
面向对象设计 92和getMaxPlayers ()求参赛选手的最大数目。
✓在构造一个保龄球赛对象  B 时，若不变式为    
B.getMaxPlayers () = 0，则使用  B.addPlayer ()
将违反该操作的契约。因此应将不变式改设
为 B.getMaxPlayers () > 0。
✓编写不变式的目的是为了 说明类实现者为类
使用者所做的约束 。因此，类实现者应注意
这种约束应是简单的、明确的边界情况。
面向对象设计 9311.3.3 重构对象设计模型
◼重构的目的 是通过软件复用来增加设计模型中的
某些不足部分，或满足其他的设计目标。
◼典型的重构活动的例子包括：
✓将一个  N 元关联转换成一组二元关联；
✓将两个不同子系统中相似的类合并为一个通用
的类；
✓将没有明显活动特征的类转换为属性；
✓将复杂类分解为几个相互关联的简单类；
✓重新组合类和操作，增加封装性和继承性；
面向对象设计 9411.3.4  优化对象设计模型
◼优化的目的是 实现设计模型中提出的性能要求 。
◼典型的优化活动的例子包括：
✓选择更高效的算法来提高系统执行的速度；
✓使用更大、更高效的存储系统；
✓减少连接中的重复性来提高查询的速度；
✓为了提高效率，增加额外的连接；
✓改变执行的顺序；
✓增加导出属性，减少对象操作的执行时间等。
◼对象设计的过程的各项活动是并发执行的。
面向对象设计 95标识遗漏的属性和操作
说明可视化
说明类型和记号
说明约束
说明异常接口规格说明
标识构件
调整构件
标识模式
调整模式复 用选择子系统
检查用例
重构继承
毁坏类
实现关联重构
优化访问路径
缓冲复杂计算
延迟复杂计算优化
面向对象设计 96◼先进行接口规格说明和复用活动，产生一个对象
设计模型 。
◼再使用这个模型检查某个特定子系统的用例，即
该子系统的功能。
◼一旦该子系统的 对象设计模型稳定下来（即不再
需要大的修改）后，再进行重构和优化 。如果在
设计接口、构件和设计模式等方面投入较多，就
可以产生一个易于修改的对象设计模型。
◼对象设计过程是一个迭代的过程。接口规格说明、
复用、重构、优化等活动需要进行多次反复设计 。
