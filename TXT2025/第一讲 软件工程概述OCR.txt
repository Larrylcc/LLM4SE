软件工程第一讲
软件工程概述
汇报人：张逍怡
_ —八厂
2软件工程背景
MS-DOS：4000
WhatsApp ：3万
电报： 5万
变焦： 6万
抖音： 8万
航天飞机： 40万
我的世界： 50万
Instagram ：100万美无人机： 350万
YouTube：540万
魔兽世界： 550万
波音 787：650万
谷歌浏览器： 670万
雪佛兰 V olt：1000万
推特： 1000万
安卓： 1200万iOS：1200万
火狐：2100万
WinXP：4500万
Ubuntu：5000万
MacOS X: 8400 万
特斯拉： 1亿
谷歌： 20亿
华为鸿蒙：近 2000万
DeepSeek -V3的代码量
达到了 6710亿当今软件的代码量：
•目前的工作方式还靠谱吗？•大家平时是怎么写程序的呢 ?
3▪软件工程 是计算机相关专业的一门重要
专业课。对于培养学生的软件素质 ，提
高学生的 软件开发能力 与软件项目管理
能力具有重要的意义 。
▪1995年，Standish Group针对系统开发
成功的研究表明 :
✓32%的项目在它们结束之前被中止 。
✓多于一半的软件项目花费的成本相
当于原来预算的 2倍。
✓只有 42%的软件项目完成时达到了
预期的范围和功能 。事实上，许多
系统只完成了部分预期的需求 。 软件工程背景暴雪跳票历史：
暗黑破坏神从 1996年11月30日跳到 1998年4月
星际争霸在 1996年的 E3上展示了早期版本，但经历
一次重制后，正式发售跳到 1998年
暗黑破坏神 2从1999年12月跳到 2000年6月28日
魔兽世界在北美地区的发行从 2004年10月15日跳到
11月23日。
星际争霸 2从2007年10月跳到 2009年冬季，再跳到
2010年的 7月27日。
暗黑破坏神 3从2008年6月28日首次公布，一直跳到
2012年5月15日。
2010年10月22日首次展示 “暴雪DOTA”，2012年5月
11日更名为 “暴雪全明星 ”，2012年6月声称会在虫群
之心后发布暴雪全明星， 2013年10月18日更名为 “风
暴英雄”。（虫心在 2013年3月12日发售）
1.做出来的游戏的体验，很有可能不是整个核心团队设计之
初设想的体验
2.越是创新，越是庞大的游戏，设计时的体验越难与完成时
的体验一致
3.在游戏设计过程中，你总有更好的点子出现 ，用还是不用
4.产品不符合用户需求《黑神话  悟空》：投资4~5亿 ➔2800万
《星鸣特工 》：投资 14亿➔暴死
4软件工程背景
大型的 IT系统经常超预算、超时、交付时系统的质量
差。其中， 40％失败、30％部分成功 、30％成功。
约瑟夫 .斯法科思（ Joseph Sifskis )
ACM图灵奖获得者
法国国家科研中心研究总监
2011年中国计算机大会特邀报告
◼软件的开发是一个很困难的活动 ，要求很仔细的计划和执行
◼软件工程就是在这样的背景下 ，由许多计算机科学家经过多方
面的探索和总结而成形的
5软件工程涉及的内容
✓介绍软件工程的概念 、技术、方法
与工具；
✓通过对传统的软件开发方法 和面向
对象的软件开发方法 的介绍，掌握
开发高质量软件的方法；
✓通过对软件开发过程 和过程管理技
术的学习，使学生了解如何进行软
件度量和管理 ，怎样进行质量保证
活动，从而能够有效地策划和管理
软件开发活动
https://www.javatpoint.com/software -engineering

6课程教学内容
重点讲授：
◼软件工程基本原理与主要内容
◼软件生命周期和软件过程模型
◼结构化软件开发
➢可行性研究
➢需求分析
➢软件设计 (总体/详细)
➢测试（白盒与黑盒测试 ）
➢维护◼面向对象的软件开发
➢面向对象的基本原理与概念
➢面向对象的软件开发过程
➢统一建模语言 UML
➢面向对象分析 /设计
◼软件项目管理
➢软件规模 /工作量估算
➢软件成本估算与进度管理
➢人员组织
➢软件质量与质量保证
➢软件配置管理
◼大模型 LLM 4AI
7学习要求与教学安排
◼本课程的性质与其说是一门 技术性很强的课程 ，不如说更像一门 管理学科 的
课程，学习理性且成体系的 思维方式 。很多规定都是国内外大师的经验总结 ，
不能误认为无用或现在用不上而放弃学习 。
◼本课程是本科毕业设计的前导课程 。
◼学以致用，善于将理论与实际结合，在实际工作中认真按照软件工程要求做，
才能巩固课内学到的知识，并能融会贯通。
•软件工程是 ⼀门理论性和实践性并重的课程
•软件工程课不是技能传授类课程  –系统性方法
•软件工程不是政治课 ，不能靠死记硬背
•软件工程本身解决的是复杂软件项目的开发问题
8学习要求与教学安排
◼课程教学分为如下五个部分
✓软件工程概念 、原理与软件过程  (4)
✓传统的软件方法学： SA/SD/ST (18)
✓面向对象概念 、方法论与建模语言  (6)
✓项目管理  (4)
◼对传统的软件过程技术或方法 ，重在讨论其原理与概念；
加强各种软件工程方法的 讨论与运用 。
9课程考核方式与要求  
▪成绩构成：
✓平时成绩 : 40% 
•考勤 : 10%  (一次无故缺勤扣 3分， 3次无故不考勤 0分，超过
3次无故缺勤期末没有成绩 )
•平时作业 +论文研读 +大作业 : 30% 
（凡是抄袭的，被抄者 /抄袭者都给零分，禁止抄袭 ChatGPT
上的内容 ）
✓期末考试 : 60% （开卷考试，拟安排在第九周周末）
✓4月26号下午 2点开始考试
10课程考核方式与要求  
◼ 平时作业要求 （交两次）:
➢平时作业（需求分析、设计、测试、面向对象建模、项目管理等课
后作业选三次）
➢提交日期： 每次作业布置后两周内（不能补交）
➢提交形式： 仅提交电子版
◼ 论文研读 （交一次）:
➢阅读任意一篇学术论文（不要读综述类论文，不要读实验类论文），
并提出⼀些改进思路
➢所读的学术论问必须发表在 ICSE、FSE、ASE、ISSTA等CCF A类
国际会议上，或是 TSE、TOSEM等CCF  A类国际期刊上，必须与软
工相关，时间为 2022年以后
➢提交时间： 每次作业布置后两周内（不能补交）
11课程考核方式与要求  
◼ 大作业:
➢严格遵循软件工程的规范与过程完成系统的设计，可二人合作完成：
提交一份规范的技术报告，包括需求分析、总体设计、关键模块的详细设计、
测试;总计不少于 20页（小四字体） ;建议采用 UML表示法，每部分需要有相应的
图。
设计测试方案，并说明如何实施测试。
初步估算软件规模与工作量，并描述估算依据。
提供可行的进度安排（以周为单位）。  
提交时间：第 9周星期四之前。
➢参考系统：
1. 北科食堂菜品推荐系统
2. 物理信息系统：如自动驾驶系统、智能家具
3. LLM4 SE或SE4LLM 的软件系统（推荐）需要调研，来确定
着眼于那部分功能
12课程考核方式与要求  
◼ 关于考试的特别说明 :
本课程考察范围为指定教材中的全部内容。因课时原因，课堂教学可能
会选取部分内容进行重点讲解，并将其余部分安排为自学内容。自学内
容依然是考察内容！  
13课程考核方式与要求  
◼《软件工程 》教学安排与注意事项
➢“雨课堂”  ：主要用于线上讲授环节，支持课堂回放、课程信息分
析与统计、教学管理；
➢课程微信群 ：大家交流与沟通渠道；
➢贝壳学堂“ http://mooc.ustb.edu.cn/portal ”：教学课件发布、
作业布置与提交；
➢教学助理 （陈亚硕研究生）：负责作业批改与答疑
14课程参考书
⚫软件工程导论 （第5版）张海藩  编著，清华大学出版社 ，2008 .2（电子
版）
⚫实用软件工程 （第二版）郑人杰、殷人昆、陶永雷编著 ，清华大学出
版社，1998
⚫UML和模式应用 （第3版） Graig Larman著, 机械工业出版社 ， 2006 .5
⚫面向对象与传统软件工程 （中译）Stephen R.Schach编著，机械工业出
版社， 2003 .9
15课程参考书
⚫软件工程：实践者之路  （第五版）普雷斯曼著 ，梅宏译 ,机械工业出版
社,2004 .3
⚫程序开发原理：抽象 、规格与面向对象设计 （中文版）Barbara Liskov ,
John Guttag著，裘健译，电子工业出版社 ，2006
⚫面向对象的系统分析 （第二版）邵维忠著 ，清华大学出版社 ，2006 .12
⚫面向对象的系统设计  邵维忠  杨芙清著 ，清华大学出版社 ，1998
⚫Principles ofmodel checking Christel Baier andJoost -Pieter Katoen (电子版）
16联系信息与课程平台
联系信息：
姓        名：张逍怡
办公地点：方兴 721
电子邮件： xiaoyi@ustb .edu.cn,xiaoyizhangacg@gmail .com
群二维码：
作业 (贝壳学堂）
225-226班
223-224班
17软件工程
第一部分   软件工程概述
1.1 软件危机
1.2 软件工程概念与原则
1.3 软件生命周期
1.4 软件过程
18软件的发展
“纸带”软件  （70年代之前）
 工作、娱乐软件（ 2010以前）
软件定义世界（现在、工业 4.0，智能制造 2025）
越来越复杂，承担的功能越来越多，深入到每个角落

19计算机软件是什么？
✓计算机系统由 软件系统 和硬件系统 组成。
✓软件是指在计算机系统的支持下 ，能够完成特定
功能与性能的 程序、数据和相关文档 。
文档 数据 代码++
从开发的角度看软件软件制品
(Software Artifact)
20文档
❑记录软件开发活动和阶段性成果、软件配置及变更的 阐述性资料
✓定义和理解软件
✓记录软件开发成果
✓辅助不同人员间的交流
✓软件需求文档
✓软件设计文档
✓软件测试文档
✓软件用户手册
✓……

数 据
21•数据形式：用户、订单、
交易、日志数据
•数据处理：表示、获取、
存储、检索、分析❑数据是程序的加工 处理对象 和结果
✓需要处理哪些数据
✓如何来获得这些数据
✓如何来表示这些数据
✓如何来存储和检索数据
✓如何来传输数据
网上商城中的手机及其数据
 某无人机仿真平台的数据库
手游网游的角色数据和用户数据
 游戏存档
程序
22❑程序（Program ）是由程序设计语言 所描述的、能为计算机所理解
和处理的一组 语句序列
✓用程序设计语言（ Programming Language ）来描述的
✓如Java、C、C++、Python
用python语言
编写的代码
软件到底是什么呢？
•软件≠程序
✓软件涉及更多制品
✓这些制品间有关联、相互依赖
•开发软件 ≠编写程序
✓软件开发需要做更多事情
✓对软件提出更高的要求
直接作用，
不需要软件
直接告诉计算
机是看不懂的
承载人的思想
机器能读懂，人也能读懂计算机软件概念给我们启示
那么如何开发一款好的软件呢？
23
软件
24软件的规模逐渐增大
MS-DOS：4000
WhatsApp ：3万
电报： 5万
变焦： 6万
抖音： 8万
航天飞机： 40万
我的世界： 50万
Instagram ：100万美无人机： 350万
YouTube：540万
魔兽世界： 550万
波音 787：650万
谷歌浏览器： 670万
雪佛兰 V olt：1000万
推特： 1000万
安卓： 1200万iOS：1200万
火狐：2100万
WinXP：4500万
Ubuntu：5000万
MacOS X: 8400 万
特斯拉： 1亿
谷歌： 20亿
华为鸿蒙：近 2000万
DeepSeek -V3的代码量
达到了 6710亿•当今软件的代码量：
1.1  软件危机
计算机软件开发与维护中遇到一系列的严重问题。 主要特征 ：
✓软件开发成本严重超标 ;
✓软件成本在计算机系统总成本所占比例逐年上升；
✓软件开发周期大大超过规定日期 ;
✓软件系统 达不到用户要求；
✓软件质量难于保证；
✓软件修改、维护困难 ；
✓缺少适当的文档资料；
✓软件开发生产率无法满足需求。
高速增长和变化的软件需求 和低
下的软件生产力 之间的矛盾  坏软件
25
软件的失效
✓北美大停电：共计有
5000万人停电长达两
天。事件共造成至少
11人死亡，经济损失
达60亿美元。
✓火星登录事故：
1999年美国火星登
陆飞船坠毁
✓2018年10月印尼狮
航的坠落事件，
189人罹难。
✓AlphaGo错误 : 李世
石“神之一挖”导
致崩溃
✓自动驾驶 bug：特
斯拉 Full Self -
Driving Beta 11.4.1
看到行人没有减速
26
软件危机的产生原因
27
简单的排序功能
 百度Apollo自动驾驶系统
思想➔脱离物质的输入 ➔及其复杂
数字孪生
元宇宙
 大语言模型中国计算机软件专家，
中国科学院院士，欧洲
科学院院士，发展中国
家科学院院士梅宏在开
幕式上发表演讲 《软件
定义世界 》如何保证你定义
的世界是对的呢？

上课
吃饭 午休自习
运动
自己完成一系列任务 →OK
ABCDF G
如果告诉其他人呢？
软件软件和计算机硬件之间
不可见性  ➔各种隐患
28软件危机的产生原因
▪软件本身的特点
-计算机系统中的 逻辑部件 ，缺乏“可见性”。质量难评价，
难管理和控制、难维护。
-规模庞大，而且程序 复杂性将随着程序规模的增加而呈指数
上升。
-易变性：需求经常变、难以把控，影响软件的制品即开发过
程。
▪软件开发与维护的方法
-对软件开发和维护的错误观念，如忽视软件需求分析的重要
性、轻视软件配置、轻视软件维护等。
-在实践过程中或多或少地采用了错误的方法和技术。
29软件危机的产生原因
软件危机的消除途径
将软件看做产品从 管理（组织措施） 和技术（方法与工
具）两方面研究如何更好地开发和维护计算机软件。
▪对计算机软件概念的正确认识  （软件由计算机程序、数据
及文档组成 ; 软件配置管理 ）；
▪认识软件开发中管理重要性（是“工程活动”）；
▪推广使用在实践中总结出来的开发软件的成功的技术和方法
（经验软件工程）；
▪开发和使用更好的软件工具
30
▪软件工程概念的出现源自软件危机。
▪软件工程从 管理和技术 两方面研究如何更好地开发和维
护计算机软件的一门 工程学科 。
▪采用工程的概念、原理、技术和方法来开发与维护软件 ，
把经过时间考验而证明正确的管理技术和当前能够得到
的最好的技术方法结合起来，以 经济地（按进度） 开发
出高质量的软件并有效地维护它。1.2 软件工程
31
软件工程定义
▪1968 年德国人  Bauer 在北大西洋公约组织会议上的定义：  "建立
并使用完善的工程化原则  , 以较经济的手段获得能在实际机器上
有效运行的可靠软件的一系列方法 "。
▪1983 年 IEEE 的软件工程定义：  “软件工程是开发、运行、  维
护和修复软件的系统方法 "。
▪1993 年 IEEE 的一个更加综合的定义：  “将系统化的 、规范的、
可度量的方法 应用于软件的开发、运行和维护的过程，即将工程
化应用于软件中 "。
32
软件工程的发展
33•个人程序时期（ 1947 --1950年代末）
•软件作坊时期（ 1960年代初 --1960年代末）
容量大、速度快的计算机  →程序  越来越复杂 →第一次软件危机
→ 1968年提出软件工程学
•软件工程时期  （1970年至今）
1970 ~1990：软件开发方法学，软件项目管理方法等
1990 ~1999：面向对象诞生
1999 ~：Web软件开发兴起与繁荣

软件工程一些共性的特点 :
▪关注于大型软件的构造
▪控制复杂性
▪有效应对变化
▪提高软件开发效率
▪组织和管理软件开发
▪有效地支持用户需求
▪有效地与不同领域的专家合作
34
软件工程的基本原理
著名的软件工程专家 Barry Boehm 综合了软件工程的若干准则，提出
了七条基本原理：
1) 按软件生存期分阶段制定计划并认真实施     把整个软件开发过程视
为一项工程，把工程划分为若干阶段，分别制定每个阶段的计划，逐
个实施。   →软件工程的本质
2) 坚持进行阶段评审     前一阶段的结果将成为下一阶段的依据。坚持
阶段的评审才能保证错误不传播到下一阶段。 →监督机制，控制风险
35
3)坚持严格的产品控制     将影响软件质量的因素在整个过程中置
于严格控制之下（采用基线配置技术） →品控，质量
4)使用现代程序设计技术     先进的程序设计技术带来的是生产率
和质量的提高。使用合适的开发模式和工具可以有效地建立功
能强大的系统。 →与时俱进
5)明确责任， 使得工作结果能够得到清楚的审查    开发组织严格
划分责任并制定产品的标准，使得每个成员的工作有据可依，
确保产品的质量。 →应对错误的能力
36
6) 用人少而精     开发组织不在人多，在于每个人的技能适合要求。同
时用人少而精，可减少沟通路径，提高生产率。 →管理
7) 不断改进开发过程     在开发的过程中不断总结经验，改进开发的组
织和过程，有效地通过过程质量的改进，提高软件产品的质量。 →
实践
37
软件工程方法学
▪软件工程包括 技术和管理两方面的内容，是技术与管
理紧密结合所形成的工程学科。
▪软件技术是指软件过程中所使用的各种技术手段，包
括软件开发方法、编程语言、软件开发工具、软件测
试技术等。管理就是通过 计划、组织和控制 等一系列
活动，合理地配置和使用各种资源，以达到既定目标
的过程。
▪在软件生命周期 全过程中使用的一整套技术方法的集
合称为方法学，也称为 范型。
▪ 软件工程方法学 包含3个要素： 方法、工具和过程。
38

▪软件工程方法学 包含3个要素：
 -过程  为了获得高质量的软件所需要完成的一系列任务
的框架，规定了完成各项任务的工作步骤。 “做什么”
 -方法  完成软件开发的各项任务的技术方法，回答 “怎
样做”的问题。
 -工具  为运用方法而提供的自动的或半自动的软件工程
支撑环境。 “拿什么做”
39
传统方法学：结构化方法学（生命周期方法学）
◼采用结构化技术(结构化分析、结构化设计与结构化编程 )及其工
具完成软件开发的各项任务
◼将软件开发过程 划分成若干个阶段 ，阶段之间有严格的技术审查
和管理复审。从技术和管理两方面对各个阶段的开发成果进行检
查。
◼使用得十分广泛、也是非常成熟的软件工程方法学。在开发中小
规模的软件时比较有效。
40
面向对象方法学
◼把对象（数据与操作的融合）作为统一的软件构件。用对
象分解取代了传统方法的功能分解。
◼把所有对象都划分成类。类是对具有相同数据和相同操作
的一组相似对象的定义。
◼采用继承机制将把若干个相关类组成一个层次结构的系统。
◼对象彼此间仅能通过发送消息互相联系。
41
1.3 软件生命周期
◼软件生命周期包含三个阶段： 软件定义 、软件开发 及软件
运行维护 。
✓定义阶段  又称为系统分析，由系统分析员负责完成。确定总体目
标，确定可行性，功能需求，估计资源与成本，进度安排等。可
以进一步划分为 问题定义 、可行性研究 和需求分析 。
✓开发阶段  具体设计与实现前一时期定义的软件。通常包括 总体设
计，详细设计 ，编码与单元测试 ，综合测试 。
✓运行维护阶段  执行不同类型的维护活动，使软件持久地满足用户
需求。
软件生命周期每个阶段的基本任务。
◼ 问题定义
 回答“要解决的问题是什么 ?” 
通过对客户的访问调查，写出关于问题性质、工程目标和工程
规模的书面报告。
◼ 可行性研究
回答“确定的问题有行得通的解决办法吗 ?”
在较抽象的高层次上进行分析和设计过程，探索这个问题是否
值得去解，是否有可行的解决办法。
43
◼需求分析
  准确地回答“为了解决这个问题，目标系统必须做什么 ?” 
确定目标系统必须具备哪些功能和性能需求，建立 需求分析模型 和需
求规格说明书 。
◼ 总体设计（又称概要设计）
  回答“概括地说，应该怎样实现目标系统 ?”
描述多种方案，并在充分权衡各种方案的利弊的基础上，推荐一个最
佳方案， 制定出实现最佳方案的详细计划 ；确定软件系统的体系结构
（确定程序由哪些模块组成以及模块间的关系）。
44
需求分析例子
45
46
47概要设计的例子
◼详细设计（又称模块设计）
回答“应该怎样具体地实现这个系统呢 ?”
把解决问题的办法具体化 ,设计出程序的 详细规格说明 。即详细地设
计每个模块，确定实现模块功能所需要的算法和数据结构。
编码和单元测试
写出正确的容易理解、容易维护的 程序模块 。选取适当的程序设计
语言，并对模块进行 测试。
48
49详细设计的例子
50
◼综合测试
回答“实现的系统正确吗？是用户需要的吗？ ” 
通过各种类型的测试使软件达到预定的要求。通常进行 集
成测试和验收测试 。保存测试计划、详细测试方案以及实
际测试结果，作为软件配置的一个组成部分。
◼ 软件维护
通过各种必要的维护活动使系统持久地满足用户的需要，
包括改正性维护 ，适应性维护 ，完善性维护 ，预防性维护
。51
软件生命周期概览
52
1.4. 软件过程
◼为了获得高质量软件所需要完成的 一系列任务 的框架，它规定了完
成各项任务的 工作步骤 。
✓ISO 9000 定义：软件过程是把 输入转化为输出的一组彼此相关的
资源和活动。
✓从软件开发的观点看，它就是使用适当的资源（包括人员、硬软
件工具、时间等），为开发软件进行的一组开发活动，在过程结
束时将输入（用户要求）转化为输出（软件产品）。
◼软件过程定义了 : 方法使用的顺序、要求交付的 文档资料 、为保证质
量和适应变化所需要的 管理、软件开发各个阶段完成的里程碑。
53
◼软件生命周期模型 来描述软件过程 。
◼为了简洁地描述软件过程，把 总体设计 和详细设计 合并在一
起称为“设计”；把 问题定义 和可行性研究 归并到需求分析
中；规格说明 作为一个单独阶段。
◼常见的软件过程模型有：
    -瀑布模型 , 快速原型模型 , 增量模型 , 螺旋模型
    -敏捷过程 , 微软过程
    -喷泉模型 , Rational 统一过程
    -DevOps
54
1. 瀑布模型
◼各项活动按自上而下，相互衔接的固定次序，如同瀑布逐
级下落，每项活动均处于一个质量环（输入 -处理-输出-评
审）中。
◼阶段间具有 顺序性和依赖性
◼推迟实现的观点
◼质量保证的观点
  -每个阶段必须完成规定的文档
  -每个阶段结束前完成文档审查
55
传统的瀑布模型 实际的瀑布模型反馈 维护
56
瀑布模型是一种文档驱动的模型。
◼ 优点：
✓可强迫开发人员采用规范的方法；
✓严格地规定了每个阶段必须提交的文档 (可维护性 )；
✓要求每个阶段交出的所有产品都必须经过质量保证小组的
仔细验证；
◼ 缺点:
✓几乎完全依赖于书面的规格说明，很可能导致最终开发出
的软件产品不能真正满足用户的需要 ;
✓缺乏灵活性。
57
2. 快速原型模型
◼所谓快速原形模型 ，就是快速建立起来的可以在计算机上运行的
程序，它所能完成的功能往往是最终产品能完成的功能的一个子
集。
◼快速原型模型的第一步是快速建立一个能反映用户主要需求的原
型系统，让用户在计算机上试用它，通过实践来了解目标系统的
概貌。原型的用途是获知用户的真正需求 。
◼软件产品的开发基本上是 线性顺序进行 的，不带反馈环，这也是
这种过程模型的主要优点。  
58
开发过程 维护过程
快速原型模型
59
快速原形模型 是对瀑布模型 的改进。主要优点是：有助于
保证用户的真实需求得到满足。此外，
✓根据原型系统产生的规格说明文档正确地描述了用户需求，因
此不存在较大的返工 (线性的过程 )。
✓开发人员通过建立原型系统已经学到了许多东西。
✓开发人员应该尽可能快地建造出原型系统，以加速软件开发过
程，节约软件开发成本 (体现快速的本质 )。
✓快速原型的某个部分可以用到最终的软件产品中 (复用)。
60
3. 增量模型
◼增量模型 是迭代和演进的过程。
◼增量模型把软件产品分解成一系列的增量构件，在增量开发
迭代中逐步加入。分解时必须遵守约束条件： 当把新构件集
成到现有软件中时，所形成的产品必须是可测试的。
◼每个构件 由多个相互作用的模块构成，并且能够完成特定的
功能。
◼第一个构件实现软件的基本需求，提供 核心功能 。早先完成
的增量可以为后期的增量提供服务。
61
详细设计 编码与测
试集成并测
试交付
增量模型
62
增量 1交付
增量 2交付
风险更大的增量模型确定了用
户需求
63
分批地逐步向用户提交产品，整个软件产品被分解成许多
个增量构件，开发人员一个构件接一个构件地向用户提交
产品。
◼优点
✓能在较短时间 内向用户提交可完成部分工作的产品。
✓逐步增加产品功能可以使用户有较充裕的时间学习和适应新
产品。
◼缺点：
✓对体系结构的设计要求高（必须开放的、具有可扩充性），
要求更精心地设计。
64
4 . 螺旋模型
◼软件风险是任何软件开发项目中都普遍存在的实际问题。
◼螺旋模型的基本思想是：将 瀑布模型 与迭代过程结合起来，并且
加入风险分析； 或者说，在每个阶段之前都增加了风险分析过程
的快速原型模型。使用原型及其他方法来尽量降低风险。
◼螺旋模型沿着螺线旋转，自内向外每旋转一圈便开发出更完善的
一个新版本。
 制定计划；  风险分析；  实施工程；  客户评估
65
简化的螺旋模型
66
决定目标 、
方案和限制评价方案
识别风险
弱化风险
开发、验证、
下一级产品楷体计划下一阶段集成
测试
完整的螺旋模型
67
螺旋模型是一种 风险驱动 的过程模型。主要适用于内部开发的大
规模软件项目（风险评估的代价与可能的中止）。
◼主要的优点在于：
✓减少了过多测试 或测试不足 所带来的风险；
✓维护只是模型的另一个周期，在维护和开发之间并没有本质区别；
✓对可选方案和约束条件的强调有利于软件的重用。
◼缺点：
✓要求软件开发人员具有丰富的风险评估经验和这方面的专门知识 。
68
为了使软件开发团对具有 高效工作 和快速响应变化 的能力， 17位著名的
软件专家于 2001年联合起草了 敏捷软件开发 宣言。
敏捷软件开发由 4个观点：
✓个体和交互 胜过过程和工具
✓可以工作的软件 胜过面面俱到的文档
✓客户合作 胜过合同谈判
✓响应变化 胜过遵循计划
695. 敏捷过程
极限编程（ XP）是敏捷过程一个典型的开发方法。适
用于需求模糊 且经常变化 的场合。有效实践包括：
✓客户作为开发的团队
✓使用用户素材
✓短交付周期
✓验收测试
✓结对编程
✓测试驱动开发
✓集体所有✓持续集成
✓可持续发展
✓开放的工作空间
✓及时调整计划
✓简单的设计
✓重构
✓使用隐喻
70极限编程
XP项目的整体开发过程  
71
XP迭代开发过程  
72
敏捷过程具有 对变化和不确定性 的更快速、更敏捷 的反
映特性，而且能够保持 可持续的开发速度 。
敏捷过程能够较好地适应商业竞争环境下对小型项目提
出的有限资源 和有限开发时间 的约束。
73
微软公司采用的软件开发过程，已经被实践证明是非常成功和行
之有效的。包括如下准则：
✓使用小型项目组
✓软件配置项基线化
✓使用原型验证概念
✓追求零缺陷
✓里程碑评审会✓项目计划兼顾不确定因素
✓有效的风险管理
✓经常生成并快速测试软件过渡版本
✓采用快速循环、递进的开发过程
✓平衡产品特性和产品成本
✓项目进度表应具有稳定性和权威性
746. 微软过程（ MSF ）
微软软件生命周期段划分
市场调研，确定产
品目标与特性
规格说明书，系统
设计，开发计划
构件开发与测试，
文档测试与调试产品发布，
软件运营
75
微软过程的生命周期模型  
76
微软过程综合了 RUP和敏捷过程的许多优点，是对很多成功
项目的开发经验总结。
适用于商业环境下具有 有限资源 和有限开发时间 约束的项目。
77
7. 变换模型
◼变换模型是一种 基于形式化规格说明语言 及程序变换 的
软件开发模型。
◼它采用形式化的软件开发方法，对形式化的软件规格说
明进行一系列自动的或半自动的程序变换，最终映射成
为计算机系统能够接受的程序系统。
◼多步程序变换过程的重要性质是：每一步程序变换的正
确性仅与该步变换所依据的规范  Mi 以及对变换后的假设  
Mi+1 有关。
78
软件需求
形式化说
明 (M0)软件设计
形式化说
明 (M1)(M2) (Mn) ……模型检查 程序变换 程序变换 程序变换◼在此意义上，变换步骤独立于其他变换步骤。这称为
变换的独立性。
◼该模型只适合于软件的形式化开发方法 ；需要严格的
数学理论和形式化技术支持；需要一整套开发环境
（如程序变换工具、定理证明工具等）的支持。  
79
8. DevOps 过程模型
⚫完整清晰固定的需求
⚫完整清晰固定的产品
定义⚫需求频繁变化
⚫需要快速开发⚫需求频繁变化
⚫需要敏捷开发
⚫需要敏捷测试传统瀑布模型 敏捷开发模型DevOps开发模型
80
◼DevOps是一组过程、方法与系统的统称，用于促进开发、
技术运营和质量保障部门之间的沟通、协作与整合。
◼在整个开发生命周期中的 持续开发 、持续测试 、持续集
成、持续部署 和持续监控 。 
质量保证DevOps
81
DevOps 工具链
◼工具链使得开发者在交付软件时可以完成生产环境的构建、测试
和运行。
82
◼代码管理： GitHub、GitLab、BitBucket 、SubVersion
◼构建工具： Ant、Gradle、maven
◼自动部署： Capistrano 、CodeDeploy
◼持续集成： Bamboo、Hudson、Jenkins
◼配置管理： Ansible、Chef、Puppet、SaltStack 、
ScriptRock GuardRail 、Anaconda
◼容器： Docker、LXC、AWS
◼编排： Kubernetes 、Core、Apache Mesos 、DC/OS
◼服务注册与发现： Zookeeper 、etcd、Consul
◼脚本语言： python、ruby、shell
◼日志管理： ELK、Logentries
83
◼系统监控： Datadog、Graphite、Icinga、Nagios
◼性能监控： AppDynamics 、New Relic 、Splunk
◼压力测试： JMeter、Blaze Meter 、loader.io
◼预警： PagerDuty 、pingdom、AWS SNS
◼HTTP加速器： Varnish
◼消息总线： ActiveMQ 、SQS
◼应用服务器： Tomcat、JBoss
◼Web服务器： Apache、Nginx、IIS
◼数据库： MySQL、Oracle、PostgreSQL ；cassandra 、
mongoDB 、redis
◼项目管理： Jira、Asana、Taiga、Trello、Basecamp 、Pivotal 
Tracker
84
✓增量模型  早期阶段使投资获得明显回报和较易维护；要求软件
具有开放的结构。
✓螺旋模型    风险驱动的过程，适用于内部开发的大型软件项目，
但要求开发人员具有风险分析和排除风险的经验及专门知识。
✓敏捷过程   一种有效应对需求不清和快速变化的小型项目。开发
过程不是很规范。
✓微软过程   一种适用于商业竞争环境下软件项目开发。
✓DevOps   现代平台软件常用方法，强调开发与运维一体化，支
持持续的集成与发布。
85
MLOps
86
MLOps isaparadigm ,including aspects like best practices, sets ofconcepts ,aswell asa
development culture when itcomes tothe end-to-end conceptualization, implementation,
monitoring, deployment, and scalability ofmachine learning products .Most ofall,itisan
engineering practice that leverages three contributing disciplines :machine learning, software
engineering (especially DevOps), anddata engineering .MLOps isaimed atproductionizing machine
learning systems bybridging thegapbetween development (Dev) andoperations (Ops) .Essentially,
MLOps aims tofacilitate thecreation ofmachine learning products byleveraging these principles :
CI/CD automation, workflow orchestration, reproducibility ;versioning ofdata, model, and code ;
collaboration ;continuous MLtraining andevaluation ;MLmetadata tracking andlogging ;continuous
monitoring ;andfeedback loops .
87
MLOps工具：https://github.com/kelvins/awesome -mlops
88
LLMOps
89

谢    谢
主讲人：张逍怡
计算机与通信工程学院青年论坛 报告
