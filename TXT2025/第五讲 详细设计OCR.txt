软件工程第五讲
详细设计
汇报人：张逍怡
_ _ 
2软件工程
第二部分  结构化方法学
详细设计
5.1 详细设计概述
5.2 结构化程序设计
5.3 人机界面设计
5.4 过程设计工具
5.5 面向数据结构的设计方法
5.6 程序复杂性度量
35.1详细设计概述
◼详细设计的根本目标是 确定应该 怎样具体地 实现所要求
的系统。
◼详细设计阶段的任务是要 设计出程序的 “蓝图”，以后
程序员将根据这个蓝图写出实际的程序代码 。因此，详
细设计的结果基本上决定了最终的程序代码的质量 。
◼过程设计 和人机界面设计 是详细设计阶段的主要任务 ,而
结构设计 、接口设计 、数据设计 在总体设计阶段应基本
完成。
45.2结构化程序设计
◼结构化程序设计的概念最早由 E.W.Dijkstra提出。1965年他在一
次会议上指出： “可以从高级语言中取消 GO TO语句”，“程序
的质量与程序中所包含的 GOTO语句的数量成反比 ”。
◼1966年Corrado Bohm和Giuseppe Jacopini证明了，只用“顺序”、
“选择”和“循环” 3种基本的控制结构就能实现任何单入口单
出口的程序 。
◼Bohm和Jacopini的证明给结构程序设计技术奠定了理论基础 。理
论上最基本的控制结构只有两种 （顺序和循环 ）。
5
A 
B 
B A 
(a) (b) 
A 或
A 
(c) 
6◼1968年Dijkstra再次建议从一切高级语言中取消 GO TO语句
，只使用 3种基本控制结构。争论导致了新的程序设计思想
、方法和风格的出现。
◼1971年IBM公司在“纽约时报信息库管理系统 ”和 “美国
宇航局空间实验室飞行模拟系统 ”的设计中成功地使用了
结构程序设计技术 。
◼1972年IBM公司的 Mills进一步提出 ，程序应该只有一个入
口和一个出口 ，从而补充了结构程序设计的规则 。_ 
7◼结构化程序设计的经典定义：
  “如果一个程序的代码块 仅仅通过顺序、选择和循环这 3种基
本控制结构进行连接 ，并且每个代码块只有一个入口和一个
出口，则称义
  “结构化程序设计这个程序是结构化的。”  
◼更全面的结构化程序设计的定是 尽可能少用 GO TO语句的程
序设计方法 。最好仅在检测出错误时才使用 GO TO语句，而
且应该总是使用前向 GO TO语句。”_ 
8
F A 
CASE 1 ASE 
CASE2 ... CASEn 
(a) (b) 
9◼人机界面设计 是接口设计 的一个重要的组成部分 。对于交互
式系统来说 ，人机界面设计 和数据设计 、体系结构设计 及过
程设计一样重要 。
◼近年来，人机界面在系统中所占的比例越来越大 ，在个别系
统中人机界面的设计工作量甚至占总设计量的一半以上 (如
游戏软件 )。
◼人机界面的设计质量 ，直接影响用户对软件产品的评价 ，从
而影响软件产品的竞争力和寿命 ，因此，必须对人机界面设
计给予足够重视 。5.3人机界面设计_ 
10◼应注重的几个设计问题 :
✓系统响应时间 ：系统响应时间不宜过长或过短。
✓用户帮助设施 ：必须提供充分的帮助信息。
✓出错信息处理 ：出现问题时交互式系统必须给出适当的出
错信息和警告信息。这些信息应该易于理解、有助于用户
从错误中恢复。
✓命令交互 ：用户既可以从菜单中选择软件功能，也可以通
过命令行序列调用软件功能。_ 
11◼设计过程：
✓用户界面设计是 一个迭代的过程 。
✓通常先创建设计模型，再用原型实现这个设计模型，并由
用户试用和评估，然后根据用户意见进行修改。可以采用
用户界面工具 或用户界面开发系统 设计与实现用户界面。
✓用户界面设计的评估标准：
➢用户界面的规格说明书的长度和复杂程度
➢命令或动作的数量、命令的平均参数个数
➢界面风格、帮助设施和出错处理协议等_ 
12◼设计指南：一般性指南
✓提高对话、移动和思考
效率
✓按功能对动作分类，并
据此设计屏幕布局
✓提供对用户工作内容敏
感的帮助设施
✓用简单动词或动词短语
作为命令名✓保持一致性
✓提供有意义的反馈
✓在执行有较大破坏性的
动作之前要求用户确认
✓允许取消绝大多数操作
✓减少在两次操作之间必
须记忆的信息量
✓允许犯错误
13◼设计指南：信息显示指南
✓只显示与当前工作内容有关的信息
✓不要用数据淹没用户
✓使用一致的标记、标准的缩写和可预知的颜色
✓允许用户保持可视化的语境
✓产生有意义的出错信息
✓使用大小写、缩进和文本分组以帮助理解
✓使用窗口分隔不同类型的信息
✓使用“模拟”显示方式表示信息
✓高效率地使用显示屏
14◼设计指南：数据输入指南
✓尽量减少用户的输入动作
✓保持信息显示和数据输入之间的一致性
✓允许用户自定义输入
✓交互应该是灵活的
✓使在当前动作语境中不适用的命令不起作用
✓让用户控制交互流
✓对所有输入动作都提供帮助
✓消除冗余的输入
15◼在过程设计阶段， 要决定各个模块的实现算法 ，并精
确地表达这些算法。描述程序处理过程的工具称为 过
程设计工具 。
◼过程设计工具 分为如下三类：
✓图形工具：程序流程图， N-S ，PAD
✓表格工具：判定表 , 判定树
✓语言工具：  PDL5.4过程设计工具
161、程序流程图
◼程序流程图 又称为程序框图 ，程序控制流程图 。历史最悠久、
使用最广泛的描述过程设计的方法，用得最混乱的一种方法。
✓主要优点 : 对控制流程的 描绘很直观 ，便于初学者掌握。
✓主要缺点： 不是逐步求精的好工具、不易表示数据结构、
对转移控制缺乏约束 。_ 
17
(a) 
m
i 伽
团}
厂
(1) (m) (c) 
(e) 
仙
叩 m
i 、
j
)° 伈
0
间勹〉
喝
(o) 叩
18ga
b
fx1
x4
x5
x6x2
x3入口
hi
jc
d
e
出口流程图示例
FFFF
F
TT
TT
Tswitchdo-while
do-whilewhile -do=1
=2
=3勹
广－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－勹二－－－－－－－－－－－ , i二 z、 Ii 
' ' I 
I 
I 
I 
' ' ' ' 
I 
I 
I 
I 
' ' ' ' 
I 
I 
: --------------------------..--- --------------
192、N-S图
◼N-S图又称盒图，是  Nassi和Shneiderman 出于要有一种不允许
违背结构化程序设计精神的图形工具的考虑提出的。
◼N-S图的主要特点 :
✓功能域明确，可以从盒图上一眼就看出来
✓很容易确定局部和全程数据的作用域
✓很容易表现嵌套关系和模块的层次结构
✓不可能任意转移控制_ 
20
盒图的基本符号  第一个任务
第二个任务
第二个任务
(a) 
循环条件
DO-WHILE 
部分条件
ELSE I THEN 
部分 部分
(d) (b) 
DO-UNTIL 
部分
循环条件\ CASE条件/ 
值l值2... 值n
CASE 1 CASE2 CASEn ... 
部分 部分 部分
(c) 
21N-S图（盒图）例子do-while x6a
b
x1 T
TF
Fx2
x4f
=1 =2 =3
gi
do-while x5hd ecwhile -do
x6
j、 _ 
~ _ 
~ _ 
22
Opet1 web browsei· 
Wikipedia Loaded. 
Tn1e 
Search for扣ticle Click Wikipedia 1血
Sub to Determine Wild-Atticle 
Select Favom·ite Gem·e 
Histon, Science Geo.graphy --------乙l Other 
功）eit1 
Click Click Click SJ)ecial:rnndom 
Histo1y Science Geogi、aphylink 
link link Press Go 
Encl 
23
1 眉
I
243、PAD
◼PAD (Problem Analysis Diagram) 又称问题分析图 。1973年由日本日立
公司发明 , 用二维树形结构的图 来表示程序的控制流。
◼PAD图的主要优点：
✓将这种图翻译成程序代码比较容易
✓用PAD符号所设计出来的程序必然是结构化程序
✓支持逐步求精的使用
✓描述的程序结构清晰
✓可以表示程序逻辑， 也可以用于描绘数据结构_ 
25
选择型顺序型
多分支选择型先判断重复型
后判断重复型
语句标号
定义
PAD图的基本符号WHILE c 1H p | 
(d) 
(a) 
UNTIL c 1H p 
(e) 
\ P2 
(b) 
。
(f) 
L2 
def 
(c) (g) 
26PAD示例
while -do x3bf
gx1a
do-while x6
jx4do-while x5
hi
c
d
ex2=1
=2
=3
274、判定表
◼判定表能够清晰地表示复杂的条件组合与应做的动作之间的
对应关系。
◼判定表由 4部分组成：左上部列出所有条件， 左下部是所有可
能做的动作， 右上部是表示各种条件组合的一个矩阵， 右下
部是和每种条件组合相对应的动作。判定表右半部的每一列
实质上是一条规则，规定了与特定的条件组合相对应的动作。
◼判定表能够简洁而又无歧义地描述处理规则 。把判定表和布
尔代数或卡诺图结合起来使用时，可以对判定表进行校验或
化简。_ 
28
条件
可能
动作条件
组合
条件组
合对应
的动作表6.1用判定表表示计算行李费的算法
/ 规则
1 2 3 4 5 6 7 8 9 
国内乘客 T T T T F F F F 
头等舱 T F T F T F T F 
残疾乘客 F F T T F F T T 
行李重量 W~30k gT F F F F F F F F 
免费 X 
(W—30)X2 X 
(W—30)X3 X 
(W—30)X4 X X 
(W—30)X6 X X 
(W—30)X8 X 
(W—30) Xl2 X 
295、判定树
◼判定树是判定表的变种 ，也能清晰地表示复杂的条件
组合与应做的动作之间的对应关系。判定树是一种比
较常用的系统分析和设计的工具。
◼判定树的优点: 形式简单 , 表达直观，易于掌握和使
用。
◼判定树的 缺点：不够简洁，对应于同一判定表的判定
树可能不唯一。_ 
30
与表 6.1等价的判定树国内乘客 1 正常乘客 (W-30)X4 
残疾乘客 (W-30)X3 
行李重儒 I 其他舱［正常乘客 (W-30)X6 
W>30kg I 残疾乘客一 (W-30)X4
头等舱厂
l.L巾木付 \', ~ ~ J 
残疾乘客 (W-30)X6 
其他舱［正常乘客 (W-30)Xl2 费李怯一丁算I,1 
行李重量
庐30kg—免费
316、PDL
▪PDL (Program Design Language) 是一种用于描述功能模块的算
法设计和加工细节的语言 ,也称为设计程序用语言或伪码 。
▪PDL具有严格的关键字 外语法，用于定义控制结构和数据结构 ；
表示实际操作和条件的 内语法，可使用自然语言的词汇 。
▪PDL的优点在于 易于书写与编辑 、易于与源程序融合 ，缺点是
不够形象直观 。_ 
32PDL例子 : 拼词检查程序
PROCEDURE spellcheck
BEGIN
--* split document into single words
LOOP get next word
add word to word list in sortorder
EXIT  WHEN all words processed
END  LOOP
--* look up words in dictionary
LOOP get word from word list_ 
33IF word not in dictionary THEN
--* display words not in dictionary
display word prompt on user terminal
IF user response says word OK THEN
add word to good word list
ELSE
add word to bad word list
ENDIF
ENDIF
EXIT WHEN all words processed
END LOOP_ 
34--* create a new words dictionary
dictionary : ＝
  merge dictionary and good word list
END spellcheck
◼为了区别关键字，规定关键字一律大写，其它单词一
律小写。
◼内语法使用自然语言来描述处理特性。内语法比较灵
活，只要写清楚就可以，不必考虑语法错，以利于人
们可把主要精力放在描述算法的逻辑上。_ 
35◼为什么面向数据结构的设计方法 ?
在许多应用领域中信息都有清楚的层次结构 ，输入数据 、
内部存储的信息以及输出数据都可能有独特的结构 。
      数据结构既影响程序的结构又影响程序的处理过程 。例
如：重复出现的数据通常由具有循环控制结构的程序来处理 ，
选择数据要用带有分支控制结构的程序来处理 。5.5面向数据结构的设计方法_ 
36◼面向数据结构的设计方法：
✓Jackson方法和 Warnier方法
✓面向数据结构的设计方法的最终目标是 得出对程序处理过程
的描述。它并不明显地使用软件结构的概念，模块是设计过
程的副产品，对于模块独立原理也没有给予应有的重视。这
种方法最适合于在详细设计阶段使用。
✓使用面向数据结构的设计方法，首先需要分析确定数据结构
，并且用适当的工具清晰地描绘数据结构。_ 
37◼Jackson图是对层次方框图 的一种精华。刻画了数据元素彼
此间的逻辑关系，提供了 顺序、选择和重复 三类逻辑数据
结构。Jackson图
A由B出现 N次
(N≥0)组成A是B或C或D中
的某一个A由B、C、D 3个
元素顺序组成A A 
A 
B c D Bo co D° B* 
38◼Jackson图具有便于表示层次结构、可读性好、即可表示数
据结构和也可表示程序结构 等优点。
◼ Jackson图和层次图形式相似，含义不相同：
✓层次图表现的是 调用关系 ，一个模块除了调用下级模块
外，还完成其他操作； Jackson图表现的是 组成关系 ，方
框中包括的操作仅仅由它下层框中的那些操作组成。
✓层次图中的方框通常代表一个 模块；Jackson图即使在描
绘程序结构时， 一个方框 也并不代表一个模块，通常一
个方框只代表几个语句 。_ 
39◼Jackson结构程序设计方法主要步骤：
①分析并确定 输入数据 和输出数据 的逻辑结构，并用 Jackson图描绘这
些数据结构。
②找出输入数据结构和输出数据结构中有 对应关系 的数据单元。
③用相应的 规则从描绘数据结构的 Jackson图导出描绘程序结构的
Jackson图。
④列出所有操作和条件 ，并且把它们 分配到程序结构图 的适当位置。
⑤用伪码表示程序。Jackson结构程序设计方法_ 
40◼Jackson结构程序设计方法在 设计比较简单的数据处理系统
时特别方便，当设计比较复杂的程序时常常遇到输入数据可
能有错、条件不能预先测试、数据结构冲突等问题。
◼正文文件字符统计的例子。_ 
41
输入数据结构 Jackson图输出数据结构 Jackson图空格°正文文件
I 
字符串＊
| 
上
字符＊
飞、、
、、
非空格°
(a) 、、
、、
、、
、、输出表格
表格体 空格总数
、、
、、I 
l 
、、
、、
串信息＊
字符串 空格数
(b) 
42
程序结构的 Jackson图统计空格
程序体 印总数
I 
处理字符串 ＊
印字产!J I分析了符串 1巴尸覂数
I 
分析字符＊
| s 
处理空格° 处理非空格°
44◼遵循软件设计的基本原理和概念，经过详细设计之后每个模块的
内容都非常具体了。那么有没有办法评价设计出的模块质量呢？
特别是定量地度量软件的性质？5.6程序复杂性度量_ 
45◼定量度量程序复杂程度的意义：
✓程序复杂程度乘以适当常数即可估算出软件中 错误的数量 以及软
件开发需要用的 工作量；
✓定量度量的结果可以用来 比较两个不同的设计或两个不同算法的
优劣；
✓程序的定量的复杂程度可以作为 模块规模的精确限度 。
◼Macabe方法和 Halstead方法是比较成熟的程序复杂程度定量度量方
法。_ 
46◼McCabe方法根据 程序控制流 的复杂程度定量度量程序的
复杂程度，度量结果称为 程序的环形复杂度 。
◼环形复杂度取决于 程序控制流的复杂程度 。当程序内分支
数或循环个数增加时，环形复杂度也随之增加，因此它是
对测试难度 的一种定量度量，也能对软件最终的 可靠性给
出某种预测 。
◼McCabe研究大量程序后发现，环形复杂度高的程序往往
是最困难、最容易出问题的程序。实践表明，模块规模以
V(G)≤10为宜，也就是说， V(G)=10是模块规模的一个更
科学更精确的上限。1、McCabe方法_ 
47◼流图实质上是“退化了的” 程序流程图 。用任何方法表示的过
程设计结果，都可以翻译成流图。
◼由程序流程图 翻译成流图的一些规则：
❑流图中的 圆表示结点 ，一个圆代表 一条或多条语句 。
❑流图中的 箭头线称为边，它和程序流程图中的箭头线类似，
代表控制流 。
❑流图中一条 边必须终止于一个结点 ，即使这个结点并不代表
任何语句。
❑由边和结点围成的面积称为 区域。
❑程序流程图中的一个顺序的 处理框序列 和一个菱形判定框 ，
可以映射成流图中的一个 结点。_ 
48程序流程图转化为流图例子
边
结点
1 1 (a) 丿侚
49
◼过程设计中某些条件
中包含了一个或多个
布尔运算符。
  生成流图时，应该把
复合条件分解为若干
个简单条件 ，每个简
单条件对应流图中一
个结点。
  包含条件的结点称为
判定节点 ，从每个判
定结点引出两条或多
条边。判定节点
IF a OR b 
then procedure x 
else procedure y 
ENDIF 
50◼基于流图，可以用下述 3种方法中的任何一种来计算环形复杂度。
✓流图中的区域数等于环形复杂度。
✓流图 G的环形复杂度 V(G)=E -N+2,其中， E是流图中边的条数， N是
结点数。
✓流图 G的环形复杂度 V(G)=P+1 ，其中， P是流图中判定结点的数目。环形复杂度的计算方法_ 
51
流图中的区域数  4
V(G)=E -N+2=11 -9+2=4
V(G)=P+1=3+1=4区域 :  R1,R2,R3,R4
边数 : 11
结点数 :9
判定结点 : 1, 2, 6边
结点
丿
(b) 
52◼Halstead 方法根据程序中 运算符和操作数的总数来度量程序
的复杂程度。
✓令N1为程序中 运算符出现的总次数， N2为操作数出现的
总次数，程序长度 N定义为：  
         N = N1 + N2
✓程序中不同运算符 (包括关键字 )的个数 n1，不同操作数 的
个数 n2。Halstead 给出预测程序长度 的公式如下：
         H = n1log2n1 + n2log2 n22、Halstead 方法_ 
53✓实践表明： 预测长度 H与实际长度 N非常接近 。
✓Halstead还给出了预测程序中包含错误的个数的公式如下：
           E = N log2(n1+n2) /3000
✓部分实践表明：发现预测的错误数与实际错误数相比误差
在8%之内。
✓Halstead无需结构分析 ，简单易行，可预测错误率以及
 可预测维护工作量。_ 
54◼详细设计阶段的关键任务是确定 系统实现的具体方案 ，设计出系统
的蓝本，以便写出高质量的程序；为此， 结构化程序设计技术 是关
键。
◼详细设计阶段的主要工作是 过程设计 和界面设计 。界面设计是接口
设计的一部分，应遵循相关 原则与指南 。 Jackson方法是一种面向
数据结构的程序设计技术，可以用于某些系统的过程设计。
◼过程设计工具 分为图形、表格和语言，各有所长。
◼Macabe方法和Halstead 方法是两种比较成熟的程序复杂程度度量方
法，在实践中有着广泛应用。小结_ 
55
1 范围
1. 1标识
a)文档标识号 ：BH_RL_E VA_SDD_ Vl.00; 
b)软件名称及标识 ：强化学习测评工具软件 VI.00, BRE; 
c)软件缩略名 ：无；
d)本文档适 用的系统 ：智能测评工具链 －强化学习测评工具软件 ；
e)文档版本 ：Vl .00。
1. 2系统概述
强化学习测评工具的主要功能是在智能软件系统设计开发阶段提供测评工具和测评服
务。组件包含随 机测试用例生 成、测试用例执行等 23个功能模块（如图 1所示），可 以支
持强化学习算法的全方位测评 ，能够有效支撑强 化学习算法及软件的单元测试 、训练过程侧
试、模型测试以及系统测试等环节。系统交付后 ，项目组成员应针对具体对象提供测评支持 ，
并持续性的针对具体任务与 仿真平台 、训练平台开发特定 API和测试用例。 图2展示了强化
学习测评工具所完成的主要使 用流程 。
56
评发测开
^v 
溅试
资源
撑
境支
环I任务与仿页平台 测评技术支持 I I基千训练平台的特定 AP1开发|I 测试用例的生 成与测评
可视化管理功能
I动志测试 ＇，『议化管理前端 I I动怂测试可视 化管咒m省II 主的红如 R| 
数据与饮型加载功能
| m屯加载I I 数据加坟1 
1 环境加代 I I测试用例伙行 1动态测试功能
测试用例生成 与选抒功能
I饷机测试用例生成 II伐糊测试川例生成 II蜕交测试用例生成 11组合测试i ll例生成 1
I(1心1心切机测试 III例＇~I 测试用例作序I I 测试 II1例远jt| 
浏试用例评价功能
I 基于覆矗半的评价 I I基于行为的心 I
I缺比位测水心 I剌试结果评估功能
I 测勾允分忭 t平估I I 行侥 1伈决策贷仗伦测I I 蜕交测试结 果.也| 
I 役糊测试结果评估I I 曾作忱1”片I I 这行效本 1”h| 
python 心dockQ］[ 硬件孕 口］
输入信息
，算法文件
，程序文件
，数据文件
，初始测试用例
，环境组件图1强化学习测评工具结构图
8 
动态测试
数据与模型加载 ） 售测试用例生成与选择
测试用例畛 冬一一 测试用例执行r 
测试结果评 估动态测试可视化管理
测试用例生成
测试用例选择啡序
测试用例执行
测试用例评价
测试结果评估
图2动态测试流程图
57
3. 1. 2智能体 (Agent)
智能体类3 
信息模块 交互模块
获取智能体名称 get_name(void)选择动作 select_action(obs)
网络更新 update(trans山on) 3 
图4智能体的屈性列表
强化学习测评工具通过 环境类来完成对具体强化 学习智能体（即训练后的算法实例）进
行加载、调用。具体如图 4所示。
智能体加载与任务书中 4.1. 2动态测试功能中的 b)点和4.2.2动态测试性能指标中的 c)
点相对应。. 1. 2. 2. 1成员变量
无成员变益
无变扯类型
无变拭意义
1 2 2.2成员函数
成员函数 功能介绍
getname 智能体名称
select_action “step”函数通常用于执行智能体选择 的动作 ，并返回与执
行该动作后的环境交互相关 的信息。
update 根据需求，更新智 能体的网络
• •• . ...........一 輩匣．．．
更改标记 1更改单号 1签字 1日期
共152页第 13页
3. 1. 2. 1设计要求 及约束
分配标识：BRE_SDD_ DTCS_0 02
智能体类环境类用 千为智能体提供交互的接口，使测试工具能 够对智能体进行加载 ，井
获取智能体 的行为决策信息。
3. 1. 2. 2设计• 选择行动（ selec t_action)
输入参数 ：timestepenvironment. TimeStep状态信息 Cobs)
输出参数 ：智能体行为决策信息
逻辑流程 ：
BEGIN 
通过g etname获取智能体 的名称索引
根据智能体的名称 ，加载智能体的 API或相关对象文件
更改标记 更改单号 签字 日期
共152页笫 14页
向智能体对象（或 API)发送当前的观浏状态 Cobs)
获取智能体输出的行为伯
END 
58
3. 1. 2. 2. 4性能指标设计
a)可支持加载的主流强 化学习模型 不少千4类，包含但不限于DQN、Actor-critic、DDPG 、
PPO等。
为满足此需求，我们会待续跟进新的强化学习环境以及与其相匹配的智能体的开发进
度，采用持续集成的模式 对强化学习评测工具进行不断地更新与迭代 ，以适应不同种类的强
化学习算法。此外，我们通过 selec t_action这一接口，将不 同强化学习算法的调用进行统
C
i 
b)可支持加载的支撑训练推理的数据格式不少于 4种，包括不仅限千代码文件、 PyTorch
的pth模型文件、智能体对象p kl文件、以及面向服务的 API接口等。
为满足此需求，我们会待续跟进新的强化学习环境以及与其相匹配的智能体的开发进
度。针对不同的智 能体，匹配其开发的依赖包（如 pytorch、tensor flow)以及不同的发 布形
工＼，如 pkl、pth、h5等文件以及 API接口。我们采用持续集成的开发 思想对强化学习评测
工具进行不断地更新与迭代，以适应不同种类的强化学习算法。此外，我们通过
selec t_action这一接口，将不同强化学习算法的调用进行统一。
59
动态测试任务管理界面
dynamic Test（主模块）
Add Dialog（子模块）Vue. js框架
log Dialog( 
模块）集成动态审查界面
Dynam icTes tConfig（主
模块）
MamConflgDI I IRandomDlalo g TestCaseDI showOu tput（子
alog（子模块） （子模块）I I alog（子模块） 11模块）
工具类模块
60
_ 
测试用例生成
O随机测试枑 贮拦羽小，
测试用例选择／排序配匡蠲动态 测试信息
任务编号 廿务名称 被测对象 创建者 舒涅时闷
task-0830 BH shibing 2023-08-30 10:12:46 
配巨蠲配蠲一印 l丰．测试用例信息
编号 环埭 智至体 初始愉入 是否失效 奖 输出
配谴匡蠲
O自适应随 机测试
配谴匡蠲巨蠲巨曰匡
测试用例执行 配巨蠲配嘿一暂无声
测试用例评价 一匹蠲配噩配雪配玉雪
测试结果评估 一配暹酝罩配雪酝玉雪
未执行
61
表17蒂求正 向追踪表
序需求规格中的需求名称需求章
SDD标识／名称 设计章节 贮二，节 丐
BRil_SDD_DTCS_OOl／环境加载类
(envir,on啦nts.py) 
职E_SDD_DTCS_002／智能体类 3. 1. 1 
(agent. py) 3. 1. 2 
BRB_SRS_DTCS_OOl／测BRE_SDD_DTCS_003／测试用例生成 3. 2. 1 
1 3. 2. L 1 (TestGeneration) 3. 2. 2 试用例生成郘E_SDD~DTCS_004／随机测试 3. 2. 3 
(RandomTest ing) 3. 2. 4 
BRE_SDD_DTC:S_OO动模糊测试 3. 2. 5 
BRE_SDD~DTCS_006／蜕变测试
BRE_SDD~DTCS_007／组合测试
BRB_SRS_DTCS_002／测BRE_SDD~DTC:S_008/Test!Prioritizati 
3. 3. 1 2 试用例选择 ／排序3. 2. L 2 ,on 
3. 3. 2 
BRE SDD DTCS 009／自适应随机测试
3 BRB_SRS_DTCS_003／测3. 2. L 3 BRE_SDD_DTCS_OlO/Testllxecution 3. 4. 1 试用例执行
4 BRB_SRS_DTCS_004／测3. 2. 1.4 BRE_SDD-'DTCS_Oll/TestsuiteElvaluat 3. 5. 1 试用例评价 10n 
5 职E_SRS_DTCS_005／测3. 2. L 5 BRE_SDD~DTCS_012/TestsuiteE!valuat 3. 6. 1 试结果评估 10n 
职E_SDD_DTQD_OOl/dyna印icTest（主模3. 8. L 1 
块） 3. 8. L 2 
职E_SDD~DTQD_002/AddD:o.alog（子模 3. 8. 2., l 
BRB_SRS_DTIIS_OOl／动 块） 3. 8. 2., 2 
6 态测试可视化管理3. 2. 2 BRE_SDD_DTQD_003/DynamicTe.stConfi 3. 8. 2., 3 
g芒模块 ） 3. 8. 2., 4 
BRE_SDD_DTQD_00-4/logDialog（子模 3. 8. 2., 5 
块） 3. 8. 2., 6 
=-,行十二'-, | =-,扫品 □I ｝如r== | 厂勹 t:t口| 
谢    谢
主讲人：张逍怡
计算机与通信工程学院_ —八厂
